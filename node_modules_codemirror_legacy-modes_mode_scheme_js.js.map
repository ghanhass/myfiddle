{"version":3,"file":"node_modules_codemirror_legacy-modes_mode_scheme_js.js","mappings":"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","sources":["./node_modules/@codemirror/legacy-modes/mode/scheme.js"],"sourcesContent":["var BUILTIN = \"builtin\", COMMENT = \"comment\", STRING = \"string\",\n    SYMBOL = \"symbol\", ATOM = \"atom\", NUMBER = \"number\", BRACKET = \"bracket\";\nvar INDENT_WORD_SKIP = 2;\n\nfunction makeKeywords(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar keywords = makeKeywords(\"Î» case-lambda call/cc class cond-expand define-class define-values exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax define-macro defmacro delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?\");\nvar indentKeys = makeKeywords(\"define let letrec let* lambda define-macro defmacro let-syntax letrec-syntax let-values let*-values define-syntax syntax-rules define-values when unless\");\n\nfunction stateStack(indent, type, prev) { // represents a state stack object\n  this.indent = indent;\n  this.type = type;\n  this.prev = prev;\n}\n\nfunction pushStack(state, indent, type) {\n  state.indentStack = new stateStack(indent, type, state.indentStack);\n}\n\nfunction popStack(state) {\n  state.indentStack = state.indentStack.prev;\n}\n\nvar binaryMatcher = new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\\/[01]+#*)?i|[-+]?[01]+#*(?:\\/[01]+#*)?@[-+]?[01]+#*(?:\\/[01]+#*)?|[-+]?[01]+#*(?:\\/[01]+#*)?[-+](?:[01]+#*(?:\\/[01]+#*)?)?i|[-+]?[01]+#*(?:\\/[01]+#*)?)(?=[()\\s;\"]|$)/i);\nvar octalMatcher = new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?)(?=[()\\s;\"]|$)/i);\nvar hexMatcher = new RegExp(/^(?:[-+]i|[-+][\\da-f]+#*(?:\\/[\\da-f]+#*)?i|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?@[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?[-+](?:[\\da-f]+#*(?:\\/[\\da-f]+#*)?)?i|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?)(?=[()\\s;\"]|$)/i);\nvar decimalMatcher = new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)i|[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)@[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)|[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)[-+](?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)?i|(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*))(?=[()\\s;\"]|$)/i);\n\nfunction isBinaryNumber (stream) {\n  return stream.match(binaryMatcher);\n}\n\nfunction isOctalNumber (stream) {\n  return stream.match(octalMatcher);\n}\n\nfunction isDecimalNumber (stream, backup) {\n  if (backup === true) {\n    stream.backUp(1);\n  }\n  return stream.match(decimalMatcher);\n}\n\nfunction isHexNumber (stream) {\n  return stream.match(hexMatcher);\n}\n\nfunction processEscapedSequence(stream, options) {\n  var next, escaped = false;\n  while ((next = stream.next()) != null) {\n    if (next == options.token && !escaped) {\n      options.state.mode = false;\n      break;\n    }\n    escaped = !escaped && next == \"\\\\\";\n  }\n}\n\nexport const scheme = {\n  name: \"scheme\",\n  startState: function () {\n    return {\n      indentStack: null,\n      indentation: 0,\n      mode: false,\n      sExprComment: false,\n      sExprQuote: false\n    };\n  },\n\n  token: function (stream, state) {\n    if (state.indentStack == null && stream.sol()) {\n      // update indentation, but only if indentStack is empty\n      state.indentation = stream.indentation();\n    }\n\n    // skip spaces\n    if (stream.eatSpace()) {\n      return null;\n    }\n    var returnType = null;\n\n    switch(state.mode){\n    case \"string\": // multi-line string parsing mode\n      processEscapedSequence(stream, {\n        token: \"\\\"\",\n        state: state\n      });\n      returnType = STRING; // continue on in scheme-string mode\n      break;\n    case \"symbol\": // escape symbol\n      processEscapedSequence(stream, {\n        token: \"|\",\n        state: state\n      });\n      returnType = SYMBOL; // continue on in scheme-symbol mode\n      break;\n    case \"comment\": // comment parsing mode\n      var next, maybeEnd = false;\n      while ((next = stream.next()) != null) {\n        if (next == \"#\" && maybeEnd) {\n\n          state.mode = false;\n          break;\n        }\n        maybeEnd = (next == \"|\");\n      }\n      returnType = COMMENT;\n      break;\n    case \"s-expr-comment\": // s-expr commenting mode\n      state.mode = false;\n      if(stream.peek() == \"(\" || stream.peek() == \"[\"){\n        // actually start scheme s-expr commenting mode\n        state.sExprComment = 0;\n      }else{\n        // if not we just comment the entire of the next token\n        stream.eatWhile(/[^\\s\\(\\)\\[\\]]/); // eat symbol atom\n        returnType = COMMENT;\n        break;\n      }\n    default: // default parsing mode\n      var ch = stream.next();\n\n      if (ch == \"\\\"\") {\n        state.mode = \"string\";\n        returnType = STRING;\n\n      } else if (ch == \"'\") {\n        if (stream.peek() == \"(\" || stream.peek() == \"[\"){\n          if (typeof state.sExprQuote != \"number\") {\n            state.sExprQuote = 0;\n          } // else already in a quoted expression\n          returnType = ATOM;\n        } else {\n          stream.eatWhile(/[\\w_\\-!$%&*+\\.\\/:<=>?@\\^~]/);\n          returnType = ATOM;\n        }\n      } else if (ch == '|') {\n        state.mode = \"symbol\";\n        returnType = SYMBOL;\n      } else if (ch == '#') {\n        if (stream.eat(\"|\")) {                    // Multi-line comment\n          state.mode = \"comment\"; // toggle to comment mode\n          returnType = COMMENT;\n        } else if (stream.eat(/[tf]/i)) {            // #t/#f (atom)\n          returnType = ATOM;\n        } else if (stream.eat(';')) {                // S-Expr comment\n          state.mode = \"s-expr-comment\";\n          returnType = COMMENT;\n        } else {\n          var numTest = null, hasExactness = false, hasRadix = true;\n          if (stream.eat(/[ei]/i)) {\n            hasExactness = true;\n          } else {\n            stream.backUp(1);       // must be radix specifier\n          }\n          if (stream.match(/^#b/i)) {\n            numTest = isBinaryNumber;\n          } else if (stream.match(/^#o/i)) {\n            numTest = isOctalNumber;\n          } else if (stream.match(/^#x/i)) {\n            numTest = isHexNumber;\n          } else if (stream.match(/^#d/i)) {\n            numTest = isDecimalNumber;\n          } else if (stream.match(/^[-+0-9.]/, false)) {\n            hasRadix = false;\n            numTest = isDecimalNumber;\n            // re-consume the initial # if all matches failed\n          } else if (!hasExactness) {\n            stream.eat('#');\n          }\n          if (numTest != null) {\n            if (hasRadix && !hasExactness) {\n              // consume optional exactness after radix\n              stream.match(/^#[ei]/i);\n            }\n            if (numTest(stream))\n              returnType = NUMBER;\n          }\n        }\n      } else if (/^[-+0-9.]/.test(ch) && isDecimalNumber(stream, true)) { // match non-prefixed number, must be decimal\n        returnType = NUMBER;\n      } else if (ch == \";\") { // comment\n        stream.skipToEnd(); // rest of the line is a comment\n        returnType = COMMENT;\n      } else if (ch == \"(\" || ch == \"[\") {\n        var keyWord = ''; var indentTemp = stream.column(), letter;\n        /**\n           Either\n           (indent-word ..\n           (non-indent-word ..\n           (;something else, bracket, etc.\n        */\n\n        while ((letter = stream.eat(/[^\\s\\(\\[\\;\\)\\]]/)) != null) {\n          keyWord += letter;\n        }\n\n        if (keyWord.length > 0 && indentKeys.propertyIsEnumerable(keyWord)) { // indent-word\n\n          pushStack(state, indentTemp + INDENT_WORD_SKIP, ch);\n        } else { // non-indent word\n          // we continue eating the spaces\n          stream.eatSpace();\n          if (stream.eol() || stream.peek() == \";\") {\n            // nothing significant after\n            // we restart indentation 1 space after\n            pushStack(state, indentTemp + 1, ch);\n          } else {\n            pushStack(state, indentTemp + stream.current().length, ch); // else we match\n          }\n        }\n        stream.backUp(stream.current().length - 1); // undo all the eating\n\n        if(typeof state.sExprComment == \"number\") state.sExprComment++;\n        if(typeof state.sExprQuote == \"number\") state.sExprQuote++;\n\n        returnType = BRACKET;\n      } else if (ch == \")\" || ch == \"]\") {\n        returnType = BRACKET;\n        if (state.indentStack != null && state.indentStack.type == (ch == \")\" ? \"(\" : \"[\")) {\n          popStack(state);\n\n          if(typeof state.sExprComment == \"number\"){\n            if(--state.sExprComment == 0){\n              returnType = COMMENT; // final closing bracket\n              state.sExprComment = false; // turn off s-expr commenting mode\n            }\n          }\n          if(typeof state.sExprQuote == \"number\"){\n            if(--state.sExprQuote == 0){\n              returnType = ATOM; // final closing bracket\n              state.sExprQuote = false; // turn off s-expr quote mode\n            }\n          }\n        }\n      } else {\n        stream.eatWhile(/[\\w_\\-!$%&*+\\.\\/:<=>?@\\^~]/);\n\n        if (keywords && keywords.propertyIsEnumerable(stream.current())) {\n          returnType = BUILTIN;\n        } else returnType = \"variable\";\n      }\n    }\n    return (typeof state.sExprComment == \"number\") ? COMMENT : ((typeof state.sExprQuote == \"number\") ? ATOM : returnType);\n  },\n\n  indent: function (state) {\n    if (state.indentStack == null) return state.indentation;\n    return state.indentStack.indent;\n  },\n\n  languageData: {\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']},\n    commentTokens: {line: \";;\"}\n  }\n};\n"],"names":["BUILTIN","COMMENT","STRING","SYMBOL","ATOM","NUMBER","BRACKET","INDENT_WORD_SKIP","makeKeywords","str","obj","words","split","i","length","keywords","indentKeys","stateStack","indent","type","prev","pushStack","state","indentStack","popStack","binaryMatcher","RegExp","octalMatcher","hexMatcher","decimalMatcher","isBinaryNumber","stream","match","isOctalNumber","isDecimalNumber","backup","backUp","isHexNumber","processEscapedSequence","options","next","escaped","token","mode","scheme","name","startState","indentation","sExprComment","sExprQuote","sol","eatSpace","returnType","maybeEnd","peek","eatWhile","ch","eat","numTest","hasExactness","hasRadix","test","skipToEnd","keyWord","indentTemp","column","letter","propertyIsEnumerable","eol","current","languageData","closeBrackets","brackets","commentTokens","line"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}