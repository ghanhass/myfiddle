{"version":3,"file":"node_modules_codemirror_legacy-modes_mode_clojure_js.js","mappings":"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","sources":["./node_modules/@codemirror/legacy-modes/mode/clojure.js"],"sourcesContent":["var atoms = [\"false\", \"nil\", \"true\"];\nvar specialForms = [\".\", \"catch\", \"def\", \"do\", \"if\", \"monitor-enter\",\n                    \"monitor-exit\", \"new\", \"quote\", \"recur\", \"set!\", \"throw\", \"try\", \"var\"];\nvar coreSymbols = [\"*\", \"*'\", \"*1\", \"*2\", \"*3\", \"*agent*\",\n                   \"*allow-unresolved-vars*\", \"*assert*\", \"*clojure-version*\",\n                   \"*command-line-args*\", \"*compile-files*\", \"*compile-path*\",\n                   \"*compiler-options*\", \"*data-readers*\", \"*default-data-reader-fn*\", \"*e\",\n                   \"*err*\", \"*file*\", \"*flush-on-newline*\", \"*fn-loader*\", \"*in*\",\n                   \"*math-context*\", \"*ns*\", \"*out*\", \"*print-dup*\", \"*print-length*\",\n                   \"*print-level*\", \"*print-meta*\", \"*print-namespace-maps*\",\n                   \"*print-readably*\", \"*read-eval*\", \"*reader-resolver*\", \"*source-path*\",\n                   \"*suppress-read*\", \"*unchecked-math*\", \"*use-context-classloader*\",\n                   \"*verbose-defrecords*\", \"*warn-on-reflection*\", \"+\", \"+'\", \"-\", \"-'\",\n                   \"->\", \"->>\", \"->ArrayChunk\", \"->Eduction\", \"->Vec\", \"->VecNode\",\n                   \"->VecSeq\", \"-cache-protocol-fn\", \"-reset-methods\", \"..\", \"/\", \"<\", \"<=\",\n                   \"=\", \"==\", \">\", \">=\", \"EMPTY-NODE\", \"Inst\", \"StackTraceElement->vec\",\n                   \"Throwable->map\", \"accessor\", \"aclone\", \"add-classpath\", \"add-watch\",\n                   \"agent\", \"agent-error\", \"agent-errors\", \"aget\", \"alength\", \"alias\",\n                   \"all-ns\", \"alter\", \"alter-meta!\", \"alter-var-root\", \"amap\", \"ancestors\",\n                   \"and\", \"any?\", \"apply\", \"areduce\", \"array-map\", \"as->\", \"aset\",\n                   \"aset-boolean\", \"aset-byte\", \"aset-char\", \"aset-double\", \"aset-float\",\n                   \"aset-int\", \"aset-long\", \"aset-short\", \"assert\", \"assoc\", \"assoc!\",\n                   \"assoc-in\", \"associative?\", \"atom\", \"await\", \"await-for\", \"await1\",\n                   \"bases\", \"bean\", \"bigdec\", \"bigint\", \"biginteger\", \"binding\", \"bit-and\",\n                   \"bit-and-not\", \"bit-clear\", \"bit-flip\", \"bit-not\", \"bit-or\", \"bit-set\",\n                   \"bit-shift-left\", \"bit-shift-right\", \"bit-test\", \"bit-xor\", \"boolean\",\n                   \"boolean-array\", \"boolean?\", \"booleans\", \"bound-fn\", \"bound-fn*\",\n                   \"bound?\", \"bounded-count\", \"butlast\", \"byte\", \"byte-array\", \"bytes\",\n                   \"bytes?\", \"case\", \"cast\", \"cat\", \"char\", \"char-array\",\n                   \"char-escape-string\", \"char-name-string\", \"char?\", \"chars\", \"chunk\",\n                   \"chunk-append\", \"chunk-buffer\", \"chunk-cons\", \"chunk-first\", \"chunk-next\",\n                   \"chunk-rest\", \"chunked-seq?\", \"class\", \"class?\", \"clear-agent-errors\",\n                   \"clojure-version\", \"coll?\", \"comment\", \"commute\", \"comp\", \"comparator\",\n                   \"compare\", \"compare-and-set!\", \"compile\", \"complement\", \"completing\",\n                   \"concat\", \"cond\", \"cond->\", \"cond->>\", \"condp\", \"conj\", \"conj!\", \"cons\",\n                   \"constantly\", \"construct-proxy\", \"contains?\", \"count\", \"counted?\",\n                   \"create-ns\", \"create-struct\", \"cycle\", \"dec\", \"dec'\", \"decimal?\",\n                   \"declare\", \"dedupe\", \"default-data-readers\", \"definline\", \"definterface\",\n                   \"defmacro\", \"defmethod\", \"defmulti\", \"defn\", \"defn-\", \"defonce\",\n                   \"defprotocol\", \"defrecord\", \"defstruct\", \"deftype\", \"delay\", \"delay?\",\n                   \"deliver\", \"denominator\", \"deref\", \"derive\", \"descendants\", \"destructure\",\n                   \"disj\", \"disj!\", \"dissoc\", \"dissoc!\", \"distinct\", \"distinct?\", \"doall\",\n                   \"dorun\", \"doseq\", \"dosync\", \"dotimes\", \"doto\", \"double\", \"double-array\",\n                   \"double?\", \"doubles\", \"drop\", \"drop-last\", \"drop-while\", \"eduction\",\n                   \"empty\", \"empty?\", \"ensure\", \"ensure-reduced\", \"enumeration-seq\",\n                   \"error-handler\", \"error-mode\", \"eval\", \"even?\", \"every-pred\", \"every?\",\n                   \"ex-data\", \"ex-info\", \"extend\", \"extend-protocol\", \"extend-type\",\n                   \"extenders\", \"extends?\", \"false?\", \"ffirst\", \"file-seq\", \"filter\",\n                   \"filterv\", \"find\", \"find-keyword\", \"find-ns\", \"find-protocol-impl\",\n                   \"find-protocol-method\", \"find-var\", \"first\", \"flatten\", \"float\",\n                   \"float-array\", \"float?\", \"floats\", \"flush\", \"fn\", \"fn?\", \"fnext\", \"fnil\",\n                   \"for\", \"force\", \"format\", \"frequencies\", \"future\", \"future-call\",\n                   \"future-cancel\", \"future-cancelled?\", \"future-done?\", \"future?\",\n                   \"gen-class\", \"gen-interface\", \"gensym\", \"get\", \"get-in\", \"get-method\",\n                   \"get-proxy-class\", \"get-thread-bindings\", \"get-validator\", \"group-by\",\n                   \"halt-when\", \"hash\", \"hash-combine\", \"hash-map\", \"hash-ordered-coll\",\n                   \"hash-set\", \"hash-unordered-coll\", \"ident?\", \"identical?\", \"identity\",\n                   \"if-let\", \"if-not\", \"if-some\", \"ifn?\", \"import\", \"in-ns\", \"inc\", \"inc'\",\n                   \"indexed?\", \"init-proxy\", \"inst-ms\", \"inst-ms*\", \"inst?\", \"instance?\",\n                   \"int\", \"int-array\", \"int?\", \"integer?\", \"interleave\", \"intern\",\n                   \"interpose\", \"into\", \"into-array\", \"ints\", \"io!\", \"isa?\", \"iterate\",\n                   \"iterator-seq\", \"juxt\", \"keep\", \"keep-indexed\", \"key\", \"keys\", \"keyword\",\n                   \"keyword?\", \"last\", \"lazy-cat\", \"lazy-seq\", \"let\", \"letfn\", \"line-seq\",\n                   \"list\", \"list*\", \"list?\", \"load\", \"load-file\", \"load-reader\",\n                   \"load-string\", \"loaded-libs\", \"locking\", \"long\", \"long-array\", \"longs\",\n                   \"loop\", \"macroexpand\", \"macroexpand-1\", \"make-array\", \"make-hierarchy\",\n                   \"map\", \"map-entry?\", \"map-indexed\", \"map?\", \"mapcat\", \"mapv\", \"max\",\n                   \"max-key\", \"memfn\", \"memoize\", \"merge\", \"merge-with\", \"meta\",\n                   \"method-sig\", \"methods\", \"min\", \"min-key\", \"mix-collection-hash\", \"mod\",\n                   \"munge\", \"name\", \"namespace\", \"namespace-munge\", \"nat-int?\", \"neg-int?\",\n                   \"neg?\", \"newline\", \"next\", \"nfirst\", \"nil?\", \"nnext\", \"not\", \"not-any?\",\n                   \"not-empty\", \"not-every?\", \"not=\", \"ns\", \"ns-aliases\", \"ns-imports\",\n                   \"ns-interns\", \"ns-map\", \"ns-name\", \"ns-publics\", \"ns-refers\",\n                   \"ns-resolve\", \"ns-unalias\", \"ns-unmap\", \"nth\", \"nthnext\", \"nthrest\",\n                   \"num\", \"number?\", \"numerator\", \"object-array\", \"odd?\", \"or\", \"parents\",\n                   \"partial\", \"partition\", \"partition-all\", \"partition-by\", \"pcalls\", \"peek\",\n                   \"persistent!\", \"pmap\", \"pop\", \"pop!\", \"pop-thread-bindings\", \"pos-int?\",\n                   \"pos?\", \"pr\", \"pr-str\", \"prefer-method\", \"prefers\",\n                   \"primitives-classnames\", \"print\", \"print-ctor\", \"print-dup\",\n                   \"print-method\", \"print-simple\", \"print-str\", \"printf\", \"println\",\n                   \"println-str\", \"prn\", \"prn-str\", \"promise\", \"proxy\",\n                   \"proxy-call-with-super\", \"proxy-mappings\", \"proxy-name\", \"proxy-super\",\n                   \"push-thread-bindings\", \"pvalues\", \"qualified-ident?\",\n                   \"qualified-keyword?\", \"qualified-symbol?\", \"quot\", \"rand\", \"rand-int\",\n                   \"rand-nth\", \"random-sample\", \"range\", \"ratio?\", \"rational?\",\n                   \"rationalize\", \"re-find\", \"re-groups\", \"re-matcher\", \"re-matches\",\n                   \"re-pattern\", \"re-seq\", \"read\", \"read-line\", \"read-string\",\n                   \"reader-conditional\", \"reader-conditional?\", \"realized?\", \"record?\",\n                   \"reduce\", \"reduce-kv\", \"reduced\", \"reduced?\", \"reductions\", \"ref\",\n                   \"ref-history-count\", \"ref-max-history\", \"ref-min-history\", \"ref-set\",\n                   \"refer\", \"refer-clojure\", \"reify\", \"release-pending-sends\", \"rem\",\n                   \"remove\", \"remove-all-methods\", \"remove-method\", \"remove-ns\",\n                   \"remove-watch\", \"repeat\", \"repeatedly\", \"replace\", \"replicate\", \"require\",\n                   \"reset!\", \"reset-meta!\", \"reset-vals!\", \"resolve\", \"rest\",\n                   \"restart-agent\", \"resultset-seq\", \"reverse\", \"reversible?\", \"rseq\",\n                   \"rsubseq\", \"run!\", \"satisfies?\", \"second\", \"select-keys\", \"send\",\n                   \"send-off\", \"send-via\", \"seq\", \"seq?\", \"seqable?\", \"seque\", \"sequence\",\n                   \"sequential?\", \"set\", \"set-agent-send-executor!\",\n                   \"set-agent-send-off-executor!\", \"set-error-handler!\", \"set-error-mode!\",\n                   \"set-validator!\", \"set?\", \"short\", \"short-array\", \"shorts\", \"shuffle\",\n                   \"shutdown-agents\", \"simple-ident?\", \"simple-keyword?\", \"simple-symbol?\",\n                   \"slurp\", \"some\", \"some->\", \"some->>\", \"some-fn\", \"some?\", \"sort\",\n                   \"sort-by\", \"sorted-map\", \"sorted-map-by\", \"sorted-set\", \"sorted-set-by\",\n                   \"sorted?\", \"special-symbol?\", \"spit\", \"split-at\", \"split-with\", \"str\",\n                   \"string?\", \"struct\", \"struct-map\", \"subs\", \"subseq\", \"subvec\", \"supers\",\n                   \"swap!\", \"swap-vals!\", \"symbol\", \"symbol?\", \"sync\", \"tagged-literal\",\n                   \"tagged-literal?\", \"take\", \"take-last\", \"take-nth\", \"take-while\", \"test\",\n                   \"the-ns\", \"thread-bound?\", \"time\", \"to-array\", \"to-array-2d\",\n                   \"trampoline\", \"transduce\", \"transient\", \"tree-seq\", \"true?\", \"type\",\n                   \"unchecked-add\", \"unchecked-add-int\", \"unchecked-byte\", \"unchecked-char\",\n                   \"unchecked-dec\", \"unchecked-dec-int\", \"unchecked-divide-int\",\n                   \"unchecked-double\", \"unchecked-float\", \"unchecked-inc\",\n                   \"unchecked-inc-int\", \"unchecked-int\", \"unchecked-long\",\n                   \"unchecked-multiply\", \"unchecked-multiply-int\", \"unchecked-negate\",\n                   \"unchecked-negate-int\", \"unchecked-remainder-int\", \"unchecked-short\",\n                   \"unchecked-subtract\", \"unchecked-subtract-int\", \"underive\", \"unquote\",\n                   \"unquote-splicing\", \"unreduced\", \"unsigned-bit-shift-right\", \"update\",\n                   \"update-in\", \"update-proxy\", \"uri?\", \"use\", \"uuid?\", \"val\", \"vals\",\n                   \"var-get\", \"var-set\", \"var?\", \"vary-meta\", \"vec\", \"vector\", \"vector-of\",\n                   \"vector?\", \"volatile!\", \"volatile?\", \"vreset!\", \"vswap!\", \"when\",\n                   \"when-first\", \"when-let\", \"when-not\", \"when-some\", \"while\",\n                   \"with-bindings\", \"with-bindings*\", \"with-in-str\", \"with-loading-context\",\n                   \"with-local-vars\", \"with-meta\", \"with-open\", \"with-out-str\",\n                   \"with-precision\", \"with-redefs\", \"with-redefs-fn\", \"xml-seq\", \"zero?\",\n                   \"zipmap\"];\nvar haveBodyParameter = [\n  \"->\", \"->>\", \"as->\", \"binding\", \"bound-fn\", \"case\", \"catch\", \"comment\",\n  \"cond\", \"cond->\", \"cond->>\", \"condp\", \"def\", \"definterface\", \"defmethod\",\n  \"defn\", \"defmacro\", \"defprotocol\", \"defrecord\", \"defstruct\", \"deftype\",\n  \"do\", \"doseq\", \"dotimes\", \"doto\", \"extend\", \"extend-protocol\",\n  \"extend-type\", \"fn\", \"for\", \"future\", \"if\", \"if-let\", \"if-not\", \"if-some\",\n  \"let\", \"letfn\", \"locking\", \"loop\", \"ns\", \"proxy\", \"reify\", \"struct-map\",\n  \"some->\", \"some->>\", \"try\", \"when\", \"when-first\", \"when-let\", \"when-not\",\n  \"when-some\", \"while\", \"with-bindings\", \"with-bindings*\", \"with-in-str\",\n  \"with-loading-context\", \"with-local-vars\", \"with-meta\", \"with-open\",\n  \"with-out-str\", \"with-precision\", \"with-redefs\", \"with-redefs-fn\"];\n\nvar atom = createLookupMap(atoms);\nvar specialForm = createLookupMap(specialForms);\nvar coreSymbol = createLookupMap(coreSymbols);\nvar hasBodyParameter = createLookupMap(haveBodyParameter);\nvar delimiter = /^(?:[\\\\\\[\\]\\s\"(),;@^`{}~]|$)/;\nvar numberLiteral = /^(?:[+\\-]?\\d+(?:(?:N|(?:[eE][+\\-]?\\d+))|(?:\\.?\\d*(?:M|(?:[eE][+\\-]?\\d+))?)|\\/\\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\\\\[\\]\\s\"#'(),;@^`{}~]|$))/;\nvar characterLiteral = /^(?:\\\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/;\n\n// simple-namespace := /^[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~.][^\\\\\\[\\]\\s\"(),;@^`{}~.\\/]*/\n// simple-symbol    := /^(?:\\/|[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)/\n// qualified-symbol := (<simple-namespace>(<.><simple-namespace>)*</>)?<simple-symbol>\nvar qualifiedSymbol = /^(?:(?:[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~.][^\\\\\\[\\]\\s\"(),;@^`{}~.\\/]*(?:\\.[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~.][^\\\\\\[\\]\\s\"(),;@^`{}~.\\/]*)*\\/)?(?:\\/|[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)*(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/;\n\nfunction base(stream, state) {\n  if (stream.eatSpace() || stream.eat(\",\")) return [\"space\", null];\n  if (stream.match(numberLiteral)) return [null, \"number\"];\n  if (stream.match(characterLiteral)) return [null, \"string.special\"];\n  if (stream.eat(/^\"/)) return (state.tokenize = inString)(stream, state);\n  if (stream.eat(/^[(\\[{]/)) return [\"open\", \"bracket\"];\n  if (stream.eat(/^[)\\]}]/)) return [\"close\", \"bracket\"];\n  if (stream.eat(/^;/)) {stream.skipToEnd(); return [\"space\", \"comment\"];}\n  if (stream.eat(/^[#'@^`~]/)) return [null, \"meta\"];\n\n  var matches = stream.match(qualifiedSymbol);\n  var symbol = matches && matches[0];\n\n  if (!symbol) {\n    // advance stream by at least one character so we don't get stuck.\n    stream.next();\n    stream.eatWhile(function (c) {return !is(c, delimiter);});\n    return [null, \"error\"];\n  }\n\n  if (symbol === \"comment\" && state.lastToken === \"(\")\n    return (state.tokenize = inComment)(stream, state);\n  if (is(symbol, atom) || symbol.charAt(0) === \":\") return [\"symbol\", \"atom\"];\n  if (is(symbol, specialForm) || is(symbol, coreSymbol)) return [\"symbol\", \"keyword\"];\n  if (state.lastToken === \"(\") return [\"symbol\", \"builtin\"]; // other operator\n\n  return [\"symbol\", \"variable\"];\n}\n\nfunction inString(stream, state) {\n  var escaped = false, next;\n\n  while (next = stream.next()) {\n    if (next === \"\\\"\" && !escaped) {state.tokenize = base; break;}\n    escaped = !escaped && next === \"\\\\\";\n  }\n\n  return [null, \"string\"];\n}\n\nfunction inComment(stream, state) {\n  var parenthesisCount = 1;\n  var next;\n\n  while (next = stream.next()) {\n    if (next === \")\") parenthesisCount--;\n    if (next === \"(\") parenthesisCount++;\n    if (parenthesisCount === 0) {\n      stream.backUp(1);\n      state.tokenize = base;\n      break;\n    }\n  }\n\n  return [\"space\", \"comment\"];\n}\n\nfunction createLookupMap(words) {\n  var obj = {};\n\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n\n  return obj;\n}\n\nfunction is(value, test) {\n  if (test instanceof RegExp) return test.test(value);\n  if (test instanceof Object) return test.propertyIsEnumerable(value);\n}\n\nexport const clojure = {\n  name: \"clojure\",\n  startState: function () {\n    return {\n      ctx: {prev: null, start: 0, indentTo: 0},\n      lastToken: null,\n      tokenize: base\n    };\n  },\n\n  token: function (stream, state) {\n    if (stream.sol() && (typeof state.ctx.indentTo !== \"number\"))\n      state.ctx.indentTo = state.ctx.start + 1;\n\n    var typeStylePair = state.tokenize(stream, state);\n    var type = typeStylePair[0];\n    var style = typeStylePair[1];\n    var current = stream.current();\n\n    if (type !== \"space\") {\n      if (state.lastToken === \"(\" && state.ctx.indentTo === null) {\n        if (type === \"symbol\" && is(current, hasBodyParameter))\n          state.ctx.indentTo = state.ctx.start + stream.indentUnit;\n        else state.ctx.indentTo = \"next\";\n      } else if (state.ctx.indentTo === \"next\") {\n        state.ctx.indentTo = stream.column();\n      }\n\n      state.lastToken = current;\n    }\n\n    if (type === \"open\")\n      state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};\n    else if (type === \"close\") state.ctx = state.ctx.prev || state.ctx;\n\n    return style;\n  },\n\n  indent: function (state) {\n    var i = state.ctx.indentTo;\n\n    return (typeof i === \"number\") ?\n      i :\n      state.ctx.start + 1;\n  },\n\n  languageData: {\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']},\n    commentTokens: {line: \";;\"},\n    autocomplete: [].concat(atoms, specialForms, coreSymbols)\n  }\n};\n"],"names":["atoms","specialForms","coreSymbols","haveBodyParameter","atom","createLookupMap","specialForm","coreSymbol","hasBodyParameter","delimiter","numberLiteral","characterLiteral","qualifiedSymbol","base","stream","state","eatSpace","eat","match","tokenize","inString","skipToEnd","matches","symbol","next","eatWhile","c","is","lastToken","inComment","charAt","escaped","parenthesisCount","backUp","words","obj","i","length","value","test","RegExp","Object","propertyIsEnumerable","clojure","name","startState","ctx","prev","start","indentTo","token","sol","typeStylePair","type","style","current","indentUnit","column","indent","languageData","closeBrackets","brackets","commentTokens","line","autocomplete","concat"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}