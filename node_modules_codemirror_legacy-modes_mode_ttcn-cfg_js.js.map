{"version":3,"file":"node_modules_codemirror_legacy-modes_mode_ttcn-cfg_js.js","mappings":"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","sources":["./node_modules/@codemirror/legacy-modes/mode/ttcn-cfg.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i)\n    obj[words[i]] = true;\n  return obj;\n}\n\nconst parserConfig = {\n  name: \"ttcn-cfg\",\n  keywords: words(\"Yes No LogFile FileMask ConsoleMask AppendFile\" +\n                  \" TimeStampFormat LogEventTypes SourceInfoFormat\" +\n                  \" LogEntityName LogSourceInfo DiskFullAction\" +\n                  \" LogFileNumber LogFileSize MatchingHints Detailed\" +\n                  \" Compact SubCategories Stack Single None Seconds\" +\n                  \" DateTime Time Stop Error Retry Delete TCPPort KillTimer\" +\n                  \" NumHCs UnixSocketsEnabled LocalAddress\"),\n  fileNCtrlMaskOptions: words(\"TTCN_EXECUTOR TTCN_ERROR TTCN_WARNING\" +\n                              \" TTCN_PORTEVENT TTCN_TIMEROP TTCN_VERDICTOP\" +\n                              \" TTCN_DEFAULTOP TTCN_TESTCASE TTCN_ACTION\" +\n                              \" TTCN_USER TTCN_FUNCTION TTCN_STATISTICS\" +\n                              \" TTCN_PARALLEL TTCN_MATCHING TTCN_DEBUG\" +\n                              \" EXECUTOR ERROR WARNING PORTEVENT TIMEROP\" +\n                              \" VERDICTOP DEFAULTOP TESTCASE ACTION USER\" +\n                              \" FUNCTION STATISTICS PARALLEL MATCHING DEBUG\" +\n                              \" LOG_ALL LOG_NOTHING ACTION_UNQUALIFIED\" +\n                              \" DEBUG_ENCDEC DEBUG_TESTPORT\" +\n                              \" DEBUG_UNQUALIFIED DEFAULTOP_ACTIVATE\" +\n                              \" DEFAULTOP_DEACTIVATE DEFAULTOP_EXIT\" +\n                              \" DEFAULTOP_UNQUALIFIED ERROR_UNQUALIFIED\" +\n                              \" EXECUTOR_COMPONENT EXECUTOR_CONFIGDATA\" +\n                              \" EXECUTOR_EXTCOMMAND EXECUTOR_LOGOPTIONS\" +\n                              \" EXECUTOR_RUNTIME EXECUTOR_UNQUALIFIED\" +\n                              \" FUNCTION_RND FUNCTION_UNQUALIFIED\" +\n                              \" MATCHING_DONE MATCHING_MCSUCCESS\" +\n                              \" MATCHING_MCUNSUCC MATCHING_MMSUCCESS\" +\n                              \" MATCHING_MMUNSUCC MATCHING_PCSUCCESS\" +\n                              \" MATCHING_PCUNSUCC MATCHING_PMSUCCESS\" +\n                              \" MATCHING_PMUNSUCC MATCHING_PROBLEM\" +\n                              \" MATCHING_TIMEOUT MATCHING_UNQUALIFIED\" +\n                              \" PARALLEL_PORTCONN PARALLEL_PORTMAP\" +\n                              \" PARALLEL_PTC PARALLEL_UNQUALIFIED\" +\n                              \" PORTEVENT_DUALRECV PORTEVENT_DUALSEND\" +\n                              \" PORTEVENT_MCRECV PORTEVENT_MCSEND\" +\n                              \" PORTEVENT_MMRECV PORTEVENT_MMSEND\" +\n                              \" PORTEVENT_MQUEUE PORTEVENT_PCIN\" +\n                              \" PORTEVENT_PCOUT PORTEVENT_PMIN\" +\n                              \" PORTEVENT_PMOUT PORTEVENT_PQUEUE\" +\n                              \" PORTEVENT_STATE PORTEVENT_UNQUALIFIED\" +\n                              \" STATISTICS_UNQUALIFIED STATISTICS_VERDICT\" +\n                              \" TESTCASE_FINISH TESTCASE_START\" +\n                              \" TESTCASE_UNQUALIFIED TIMEROP_GUARD\" +\n                              \" TIMEROP_READ TIMEROP_START TIMEROP_STOP\" +\n                              \" TIMEROP_TIMEOUT TIMEROP_UNQUALIFIED\" +\n                              \" USER_UNQUALIFIED VERDICTOP_FINAL\" +\n                              \" VERDICTOP_GETVERDICT VERDICTOP_SETVERDICT\" +\n                              \" VERDICTOP_UNQUALIFIED WARNING_UNQUALIFIED\"),\n  externalCommands: words(\"BeginControlPart EndControlPart BeginTestCase\" +\n                          \" EndTestCase\"),\n  multiLineStrings: true\n}\n\nvar keywords = parserConfig.keywords,\n    fileNCtrlMaskOptions = parserConfig.fileNCtrlMaskOptions,\n    externalCommands = parserConfig.externalCommands,\n    multiLineStrings = parserConfig.multiLineStrings,\n    indentStatements = parserConfig.indentStatements !== false;\nvar isOperatorChar = /[\\|]/;\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[:=]/.test(ch)) {\n    curPunc = ch;\n    return \"punctuation\";\n  }\n  if (ch == \"#\"){\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  if (ch == \"[\"){\n    stream.eatWhile(/[\\w_\\]]/);\n    return \"number\";\n  }\n\n  stream.eatWhile(/[\\w\\$_]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (fileNCtrlMaskOptions.propertyIsEnumerable(cur))\n    return \"atom\";\n  if (externalCommands.propertyIsEnumerable(cur)) return \"deleted\";\n\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped){\n        var afterNext = stream.peek();\n        //look if the character if the quote is like the B in '10100010'B\n        if (afterNext){\n          afterNext = afterNext.toLowerCase();\n          if(afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\")\n            stream.next();\n        }\n        end = true; break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !(escaped || multiLineStrings))\n      state.tokenize = null;\n    return \"string\";\n  };\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\")\n    indent = state.context.indented;\n  return state.context = new Context(indent, col, type, null, state.context);\n}\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n//Interface\nexport const ttcnCfg = {\n  name: \"ttcn\",\n  startState: function() {\n    return {\n      tokenize: null,\n      context: new Context(0, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n\n  token: function(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n        && ctx.type == \"statement\"){\n      popContext(state);\n    }\n    else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n    else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n    else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n    else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") ctx = popContext(state);\n      if (ctx.type == \"}\") ctx = popContext(state);\n      while (ctx.type == \"statement\") ctx = popContext(state);\n    }\n    else if (curPunc == ctx.type) popContext(state);\n    else if (indentStatements && (((ctx.type == \"}\" || ctx.type == \"top\")\n                                   && curPunc != ';') || (ctx.type == \"statement\"\n                                                          && curPunc == \"newstatement\")))\n      pushContext(state, stream.column(), \"statement\");\n    state.startOfLine = false;\n    return style;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"names":["words","str","obj","split","i","length","parserConfig","name","keywords","fileNCtrlMaskOptions","externalCommands","multiLineStrings","indentStatements","isOperatorChar","curPunc","tokenBase","stream","state","ch","next","tokenize","tokenString","test","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","afterNext","peek","toLowerCase","Context","indented","column","type","align","prev","pushContext","col","indent","context","popContext","t","ttcnCfg","startState","startOfLine","token","ctx","sol","indentation","eatSpace","style","languageData","indentOnInput","commentTokens","line"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}