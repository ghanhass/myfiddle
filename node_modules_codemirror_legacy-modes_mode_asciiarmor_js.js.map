{"version":3,"file":"node_modules_codemirror_legacy-modes_mode_asciiarmor_js.js","mappings":";;;;;;;;;;;;;AAAA,SAASA,eAAeA,CAACC,MAAM,EAAE;EAC/B,IAAIC,KAAK,GAAGD,MAAM,CAACE,KAAK,CAAC,QAAQ,CAAC;EAClCF,MAAM,CAACG,SAAS,CAAC,CAAC;EAClB,OAAOF,KAAK,GAAG,OAAO,GAAG,IAAI;AAC/B;AAEO,MAAMG,UAAU,GAAG;EACxBC,IAAI,EAAE,YAAY;EAClBC,KAAK,EAAE,SAAAA,CAASN,MAAM,EAAEO,KAAK,EAAE;IAC7B,IAAIC,CAAC;IACL,IAAID,KAAK,CAACA,KAAK,IAAI,KAAK,EAAE;MACxB,IAAIP,MAAM,CAACS,GAAG,CAAC,CAAC,KAAKD,CAAC,GAAGR,MAAM,CAACE,KAAK,CAAC,4BAA4B,CAAC,CAAC,EAAE;QACpEK,KAAK,CAACA,KAAK,GAAG,SAAS;QACvBA,KAAK,CAACG,IAAI,GAAGF,CAAC,CAAC,CAAC,CAAC;QACjB,OAAO,KAAK;MACd;MACA,OAAOT,eAAe,CAACC,MAAM,CAAC;IAChC,CAAC,MAAM,IAAIO,KAAK,CAACA,KAAK,IAAI,SAAS,EAAE;MACnC,IAAIP,MAAM,CAACS,GAAG,CAAC,CAAC,IAAIT,MAAM,CAACE,KAAK,CAAC,OAAO,CAAC,EAAE;QACzCK,KAAK,CAACA,KAAK,GAAG,QAAQ;QACtB,OAAO,MAAM;MACf,CAAC,MAAM;QACL,IAAII,MAAM,GAAGZ,eAAe,CAACC,MAAM,CAAC;QACpC,IAAIW,MAAM,EAAEJ,KAAK,CAACA,KAAK,GAAG,MAAM;QAChC,OAAOI,MAAM;MACf;IACF,CAAC,MAAM,IAAIJ,KAAK,CAACA,KAAK,IAAI,QAAQ,EAAE;MAClCP,MAAM,CAACG,SAAS,CAAC,CAAC;MAClBI,KAAK,CAACA,KAAK,GAAG,SAAS;MACvB,OAAO,QAAQ;IACjB,CAAC,MAAM,IAAIA,KAAK,CAACA,KAAK,IAAI,MAAM,EAAE;MAChC,IAAIP,MAAM,CAACS,GAAG,CAAC,CAAC,KAAKD,CAAC,GAAGR,MAAM,CAACE,KAAK,CAAC,0BAA0B,CAAC,CAAC,EAAE;QAClE,IAAIM,CAAC,CAAC,CAAC,CAAC,IAAID,KAAK,CAACG,IAAI,EAAE,OAAO,OAAO;QACtCH,KAAK,CAACA,KAAK,GAAG,KAAK;QACnB,OAAO,KAAK;MACd,CAAC,MAAM;QACL,IAAIP,MAAM,CAACY,QAAQ,CAAC,iBAAiB,CAAC,EAAE;UACtC,OAAO,IAAI;QACb,CAAC,MAAM;UACLZ,MAAM,CAACa,IAAI,CAAC,CAAC;UACb,OAAO,OAAO;QAChB;MACF;IACF,CAAC,MAAM,IAAIN,KAAK,CAACA,KAAK,IAAI,KAAK,EAAE;MAC/B,OAAOR,eAAe,CAACC,MAAM,CAAC;IAChC;EACF,CAAC;EACDc,SAAS,EAAE,SAAAA,CAASP,KAAK,EAAE;IACzB,IAAIA,KAAK,CAACA,KAAK,IAAI,SAAS,EAAEA,KAAK,CAACA,KAAK,GAAG,MAAM;EACpD,CAAC;EACDQ,UAAU,EAAE,SAAAA,CAAA,EAAW;IACrB,OAAO;MAACR,KAAK,EAAE,KAAK;MAAEG,IAAI,EAAE;IAAI,CAAC;EACnC;AACF,CAAC,C","sources":["./node_modules/@codemirror/legacy-modes/mode/asciiarmor.js"],"sourcesContent":["function errorIfNotEmpty(stream) {\n  var nonWS = stream.match(/^\\s*\\S/);\n  stream.skipToEnd();\n  return nonWS ? \"error\" : null;\n}\n\nexport const asciiArmor = {\n  name: \"asciiarmor\",\n  token: function(stream, state) {\n    var m;\n    if (state.state == \"top\") {\n      if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\\s*$/))) {\n        state.state = \"headers\";\n        state.type = m[1];\n        return \"tag\";\n      }\n      return errorIfNotEmpty(stream);\n    } else if (state.state == \"headers\") {\n      if (stream.sol() && stream.match(/^\\w+:/)) {\n        state.state = \"header\";\n        return \"atom\";\n      } else {\n        var result = errorIfNotEmpty(stream);\n        if (result) state.state = \"body\";\n        return result;\n      }\n    } else if (state.state == \"header\") {\n      stream.skipToEnd();\n      state.state = \"headers\";\n      return \"string\";\n    } else if (state.state == \"body\") {\n      if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\\s*$/))) {\n        if (m[1] != state.type) return \"error\";\n        state.state = \"end\";\n        return \"tag\";\n      } else {\n        if (stream.eatWhile(/[A-Za-z0-9+\\/=]/)) {\n          return null;\n        } else {\n          stream.next();\n          return \"error\";\n        }\n      }\n    } else if (state.state == \"end\") {\n      return errorIfNotEmpty(stream);\n    }\n  },\n  blankLine: function(state) {\n    if (state.state == \"headers\") state.state = \"body\";\n  },\n  startState: function() {\n    return {state: \"top\", type: null};\n  }\n};\n"],"names":["errorIfNotEmpty","stream","nonWS","match","skipToEnd","asciiArmor","name","token","state","m","sol","type","result","eatWhile","next","blankLine","startState"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}