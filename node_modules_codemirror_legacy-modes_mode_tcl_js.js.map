{"version":3,"file":"node_modules_codemirror_legacy-modes_mode_tcl_js.js","mappings":"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","sources":["./node_modules/@codemirror/legacy-modes/mode/tcl.js"],"sourcesContent":["function parseWords(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar keywords = parseWords(\"Tcl safe after append array auto_execok auto_import auto_load \" +\n                          \"auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror \" +\n                          \"binary break catch cd close concat continue dde eof encoding error \" +\n                          \"eval exec exit expr fblocked fconfigure fcopy file fileevent filename \" +\n                          \"filename flush for foreach format gets glob global history http if \" +\n                          \"incr info interp join lappend lindex linsert list llength load lrange \" +\n                          \"lreplace lsearch lset lsort memory msgcat namespace open package parray \" +\n                          \"pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp \" +\n                          \"registry regsub rename resource return scan seek set socket source split \" +\n                          \"string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord \" +\n                          \"tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest \" +\n                          \"tclvars tell time trace unknown unset update uplevel upvar variable \" +\n                          \"vwait\");\nvar functions = parseWords(\"if elseif else and not or eq ne in ni for foreach while switch\");\nvar isOperatorChar = /[+\\-*&%=<>!?^\\/\\|]/;\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\nfunction tokenBase(stream, state) {\n  var beforeParams = state.beforeParams;\n  state.beforeParams = false;\n  var ch = stream.next();\n  if ((ch == '\"' || ch == \"'\") && state.inParams) {\n    return chain(stream, state, tokenString(ch));\n  } else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n    if (ch == \"(\" && beforeParams) state.inParams = true;\n    else if (ch == \")\") state.inParams = false;\n    return null;\n  } else if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  } else if (ch == \"#\") {\n    if (stream.eat(\"*\"))\n      return chain(stream, state, tokenComment);\n    if (ch == \"#\" && stream.match(/ *\\[ *\\[/))\n      return chain(stream, state, tokenUnparsed);\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (ch == '\"') {\n    stream.skipTo(/\"/);\n    return \"comment\";\n  } else if (ch == \"$\") {\n    stream.eatWhile(/[$_a-z0-9A-Z\\.{:]/);\n    stream.eatWhile(/}/);\n    state.beforeParams = true;\n    return \"builtin\";\n  } else if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"comment\";\n  } else {\n    stream.eatWhile(/[\\w\\$_{}\\xa1-\\uffff]/);\n    var word = stream.current().toLowerCase();\n    if (keywords && keywords.propertyIsEnumerable(word))\n      return \"keyword\";\n    if (functions && functions.propertyIsEnumerable(word)) {\n      state.beforeParams = true;\n      return \"keyword\";\n    }\n    return null;\n  }\n}\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\nfunction tokenUnparsed(stream, state) {\n  var maybeEnd = 0, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd == 2) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    if (ch == \"]\")\n      maybeEnd++;\n    else if (ch != \" \")\n      maybeEnd = 0;\n  }\n  return \"meta\";\n}\nexport const tcl = {\n  name: \"tcl\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      beforeParams: false,\n      inParams: false\n    };\n  },\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"names":["parseWords","str","obj","words","split","i","length","keywords","functions","isOperatorChar","chain","stream","state","f","tokenize","tokenBase","beforeParams","ch","next","inParams","tokenString","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","skipTo","word","current","toLowerCase","propertyIsEnumerable","quote","escaped","end","maybeEnd","tcl","name","startState","token","eatSpace","languageData","commentTokens","line"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}