{"version":3,"file":"node_modules_codemirror_lang-markdown_dist_index_js.js","mappings":"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","sources":["./node_modules/@codemirror/lang-markdown/dist/index.js","./node_modules/@lezer/markdown/dist/index.js"],"sourcesContent":["import { EditorSelection, countColumn, Prec, EditorState } from '@codemirror/state';\nimport { keymap } from '@codemirror/view';\nimport { defineLanguageFacet, foldNodeProp, indentNodeProp, languageDataProp, foldService, syntaxTree, Language, LanguageDescription, ParseContext, indentUnit, LanguageSupport } from '@codemirror/language';\nimport { CompletionContext } from '@codemirror/autocomplete';\nimport { parser, GFM, Subscript, Superscript, Emoji, MarkdownParser, parseCode } from '@lezer/markdown';\nimport { html, htmlCompletionSource } from '@codemirror/lang-html';\nimport { NodeProp } from '@lezer/common';\n\nconst data = /*@__PURE__*/defineLanguageFacet({ commentTokens: { block: { open: \"<!--\", close: \"-->\" } } });\nconst headingProp = /*@__PURE__*/new NodeProp();\nconst commonmark = /*@__PURE__*/parser.configure({\n    props: [\n        /*@__PURE__*/foldNodeProp.add(type => {\n            return !type.is(\"Block\") || type.is(\"Document\") || isHeading(type) != null || isList(type) ? undefined\n                : (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });\n        }),\n        /*@__PURE__*/headingProp.add(isHeading),\n        /*@__PURE__*/indentNodeProp.add({\n            Document: () => null\n        }),\n        /*@__PURE__*/languageDataProp.add({\n            Document: data\n        })\n    ]\n});\nfunction isHeading(type) {\n    let match = /^(?:ATX|Setext)Heading(\\d)$/.exec(type.name);\n    return match ? +match[1] : undefined;\n}\nfunction isList(type) {\n    return type.name == \"OrderedList\" || type.name == \"BulletList\";\n}\nfunction findSectionEnd(headerNode, level) {\n    let last = headerNode;\n    for (;;) {\n        let next = last.nextSibling, heading;\n        if (!next || (heading = isHeading(next.type)) != null && heading <= level)\n            break;\n        last = next;\n    }\n    return last.to;\n}\nconst headerIndent = /*@__PURE__*/foldService.of((state, start, end) => {\n    for (let node = syntaxTree(state).resolveInner(end, -1); node; node = node.parent) {\n        if (node.from < start)\n            break;\n        let heading = node.type.prop(headingProp);\n        if (heading == null)\n            continue;\n        let upto = findSectionEnd(node, heading);\n        if (upto > end)\n            return { from: end, to: upto };\n    }\n    return null;\n});\nfunction mkLang(parser) {\n    return new Language(data, parser, [headerIndent], \"markdown\");\n}\n/**\nLanguage support for strict CommonMark.\n*/\nconst commonmarkLanguage = /*@__PURE__*/mkLang(commonmark);\nconst extended = /*@__PURE__*/commonmark.configure([GFM, Subscript, Superscript, Emoji, {\n        props: [\n            /*@__PURE__*/foldNodeProp.add({\n                Table: (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to })\n            })\n        ]\n    }]);\n/**\nLanguage support for [GFM](https://github.github.com/gfm/) plus\nsubscript, superscript, and emoji syntax.\n*/\nconst markdownLanguage = /*@__PURE__*/mkLang(extended);\nfunction getCodeParser(languages, defaultLanguage) {\n    return (info) => {\n        if (info && languages) {\n            let found = null;\n            // Strip anything after whitespace\n            info = /\\S*/.exec(info)[0];\n            if (typeof languages == \"function\")\n                found = languages(info);\n            else\n                found = LanguageDescription.matchLanguageName(languages, info, true);\n            if (found instanceof LanguageDescription)\n                return found.support ? found.support.language.parser : ParseContext.getSkippingParser(found.load());\n            else if (found)\n                return found.parser;\n        }\n        return defaultLanguage ? defaultLanguage.parser : null;\n    };\n}\n\nclass Context {\n    constructor(node, from, to, spaceBefore, spaceAfter, type, item) {\n        this.node = node;\n        this.from = from;\n        this.to = to;\n        this.spaceBefore = spaceBefore;\n        this.spaceAfter = spaceAfter;\n        this.type = type;\n        this.item = item;\n    }\n    blank(maxWidth, trailing = true) {\n        let result = this.spaceBefore + (this.node.name == \"Blockquote\" ? \">\" : \"\");\n        if (maxWidth != null) {\n            while (result.length < maxWidth)\n                result += \" \";\n            return result;\n        }\n        else {\n            for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)\n                result += \" \";\n            return result + (trailing ? this.spaceAfter : \"\");\n        }\n    }\n    marker(doc, add) {\n        let number = this.node.name == \"OrderedList\" ? String((+itemNumber(this.item, doc)[2] + add)) : \"\";\n        return this.spaceBefore + number + this.type + this.spaceAfter;\n    }\n}\nfunction getContext(node, doc) {\n    let nodes = [], context = [];\n    for (let cur = node; cur; cur = cur.parent) {\n        if (cur.name == \"FencedCode\")\n            return context;\n        if (cur.name == \"ListItem\" || cur.name == \"Blockquote\")\n            nodes.push(cur);\n    }\n    for (let i = nodes.length - 1; i >= 0; i--) {\n        let node = nodes[i], match;\n        let line = doc.lineAt(node.from), startPos = node.from - line.from;\n        if (node.name == \"Blockquote\" && (match = /^ *>( ?)/.exec(line.text.slice(startPos)))) {\n            context.push(new Context(node, startPos, startPos + match[0].length, \"\", match[1], \">\", null));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"OrderedList\" &&\n            (match = /^( *)\\d+([.)])( *)/.exec(line.text.slice(startPos)))) {\n            let after = match[3], len = match[0].length;\n            if (after.length >= 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, match[2], node));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"BulletList\" &&\n            (match = /^( *)([-+*])( {1,4}\\[[ xX]\\])?( +)/.exec(line.text.slice(startPos)))) {\n            let after = match[4], len = match[0].length;\n            if (after.length > 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            let type = match[2];\n            if (match[3])\n                type += match[3].replace(/[xX]/, ' ');\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, type, node));\n        }\n    }\n    return context;\n}\nfunction itemNumber(item, doc) {\n    return /^(\\s*)(\\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));\n}\nfunction renumberList(after, doc, changes, offset = 0) {\n    for (let prev = -1, node = after;;) {\n        if (node.name == \"ListItem\") {\n            let m = itemNumber(node, doc);\n            let number = +m[2];\n            if (prev >= 0) {\n                if (number != prev + 1)\n                    return;\n                changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2 + offset) });\n            }\n            prev = number;\n        }\n        let next = node.nextSibling;\n        if (!next)\n            break;\n        node = next;\n    }\n}\nfunction normalizeIndent(content, state) {\n    let blank = /^[ \\t]*/.exec(content)[0].length;\n    if (!blank || state.facet(indentUnit) != \"\\t\")\n        return content;\n    let col = countColumn(content, 4, blank);\n    let space = \"\";\n    for (let i = col; i > 0;) {\n        if (i >= 4) {\n            space += \"\\t\";\n            i -= 4;\n        }\n        else {\n            space += \" \";\n            i--;\n        }\n    }\n    return space + content.slice(blank);\n}\n/**\nThis command, when invoked in Markdown context with cursor\nselection(s), will create a new line with the markup for\nblockquotes and lists that were active on the old line. If the\ncursor was directly after the end of the markup for the old line,\ntrailing whitespace and list markers are removed from that line.\n\nThe command does nothing in non-Markdown context, so it should\nnot be used as the only binding for Enter (even in a Markdown\ndocument, HTML and code regions might use a different language).\n*/\nconst insertNewlineContinueMarkup = ({ state, dispatch }) => {\n    let tree = syntaxTree(state), { doc } = state;\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty || !markdownLanguage.isActiveAt(state, range.from, -1) && !markdownLanguage.isActiveAt(state, range.from, 1))\n            return dont = { range };\n        let pos = range.from, line = doc.lineAt(pos);\n        let context = getContext(tree.resolveInner(pos, -1), doc);\n        while (context.length && context[context.length - 1].from > pos - line.from)\n            context.pop();\n        if (!context.length)\n            return dont = { range };\n        let inner = context[context.length - 1];\n        if (inner.to - inner.spaceAfter.length > pos - line.from)\n            return dont = { range };\n        let emptyLine = pos >= (inner.to - inner.spaceAfter.length) && !/\\S/.test(line.text.slice(inner.to));\n        // Empty line in list\n        if (inner.item && emptyLine) {\n            let first = inner.node.firstChild, second = inner.node.getChild(\"ListItem\", \"ListItem\");\n            // Not second item or blank line before: delete a level of markup\n            if (first.to >= pos || second && second.to < pos ||\n                line.from > 0 && !/[^\\s>]/.test(doc.lineAt(line.from - 1).text)) {\n                let next = context.length > 1 ? context[context.length - 2] : null;\n                let delTo, insert = \"\";\n                if (next && next.item) { // Re-add marker for the list at the next level\n                    delTo = line.from + next.from;\n                    insert = next.marker(doc, 1);\n                }\n                else {\n                    delTo = line.from + (next ? next.to : 0);\n                }\n                let changes = [{ from: delTo, to: pos, insert }];\n                if (inner.node.name == \"OrderedList\")\n                    renumberList(inner.item, doc, changes, -2);\n                if (next && next.node.name == \"OrderedList\")\n                    renumberList(next.item, doc, changes);\n                return { range: EditorSelection.cursor(delTo + insert.length), changes };\n            }\n            else { // Move second item down, making tight two-item list non-tight\n                let insert = blankLine(context, state, line);\n                return { range: EditorSelection.cursor(pos + insert.length + 1),\n                    changes: { from: line.from, insert: insert + state.lineBreak } };\n            }\n        }\n        if (inner.node.name == \"Blockquote\" && emptyLine && line.from) {\n            let prevLine = doc.lineAt(line.from - 1), quoted = />\\s*$/.exec(prevLine.text);\n            // Two aligned empty quoted lines in a row\n            if (quoted && quoted.index == inner.from) {\n                let changes = state.changes([{ from: prevLine.from + quoted.index, to: prevLine.to },\n                    { from: line.from + inner.from, to: line.to }]);\n                return { range: range.map(changes), changes };\n            }\n        }\n        let changes = [];\n        if (inner.node.name == \"OrderedList\")\n            renumberList(inner.item, doc, changes);\n        let continued = inner.item && inner.item.from < line.from;\n        let insert = \"\";\n        // If not dedented\n        if (!continued || /^[\\s\\d.)\\-+*>]*/.exec(line.text)[0].length >= inner.to) {\n            for (let i = 0, e = context.length - 1; i <= e; i++) {\n                insert += i == e && !continued ? context[i].marker(doc, 1)\n                    : context[i].blank(i < e ? countColumn(line.text, 4, context[i + 1].from) - insert.length : null);\n            }\n        }\n        let from = pos;\n        while (from > line.from && /\\s/.test(line.text.charAt(from - line.from - 1)))\n            from--;\n        insert = normalizeIndent(insert, state);\n        if (nonTightList(inner.node, state.doc))\n            insert = blankLine(context, state, line) + state.lineBreak + insert;\n        changes.push({ from, to: pos, insert: state.lineBreak + insert });\n        return { range: EditorSelection.cursor(from + insert.length + 1), changes };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\nfunction isMark(node) {\n    return node.name == \"QuoteMark\" || node.name == \"ListMark\";\n}\nfunction nonTightList(node, doc) {\n    if (node.name != \"OrderedList\" && node.name != \"BulletList\")\n        return false;\n    let first = node.firstChild, second = node.getChild(\"ListItem\", \"ListItem\");\n    if (!second)\n        return false;\n    let line1 = doc.lineAt(first.to), line2 = doc.lineAt(second.from);\n    let empty = /^[\\s>]*$/.test(line1.text);\n    return line1.number + (empty ? 0 : 1) < line2.number;\n}\nfunction blankLine(context, state, line) {\n    let insert = \"\";\n    for (let i = 0, e = context.length - 2; i <= e; i++) {\n        insert += context[i].blank(i < e\n            ? countColumn(line.text, 4, context[i + 1].from) - insert.length\n            : null, i < e);\n    }\n    return normalizeIndent(insert, state);\n}\nfunction contextNodeForDelete(tree, pos) {\n    let node = tree.resolveInner(pos, -1), scan = pos;\n    if (isMark(node)) {\n        scan = node.from;\n        node = node.parent;\n    }\n    for (let prev; prev = node.childBefore(scan);) {\n        if (isMark(prev)) {\n            scan = prev.from;\n        }\n        else if (prev.name == \"OrderedList\" || prev.name == \"BulletList\") {\n            node = prev.lastChild;\n            scan = node.to;\n        }\n        else {\n            break;\n        }\n    }\n    return node;\n}\n/**\nThis command will, when invoked in a Markdown context with the\ncursor directly after list or blockquote markup, delete one level\nof markup. When the markup is for a list, it will be replaced by\nspaces on the first invocation (a further invocation will delete\nthe spaces), to make it easy to continue a list.\n\nWhen not after Markdown block markup, this command will return\nfalse, so it is intended to be bound alongside other deletion\ncommands, with a higher precedence than the more generic commands.\n*/\nconst deleteMarkupBackward = ({ state, dispatch }) => {\n    let tree = syntaxTree(state);\n    let dont = null, changes = state.changeByRange(range => {\n        let pos = range.from, { doc } = state;\n        if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {\n            let line = doc.lineAt(pos);\n            let context = getContext(contextNodeForDelete(tree, pos), doc);\n            if (context.length) {\n                let inner = context[context.length - 1];\n                let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);\n                // Delete extra trailing space after markup\n                if (pos - line.from > spaceEnd && !/\\S/.test(line.text.slice(spaceEnd, pos - line.from)))\n                    return { range: EditorSelection.cursor(line.from + spaceEnd),\n                        changes: { from: line.from + spaceEnd, to: pos } };\n                if (pos - line.from == spaceEnd &&\n                    // Only apply this if we're on the line that has the\n                    // construct's syntax, or there's only indentation in the\n                    // target range\n                    (!inner.item || line.from <= inner.item.from || !/\\S/.test(line.text.slice(0, inner.to)))) {\n                    let start = line.from + inner.from;\n                    // Replace a list item marker with blank space\n                    if (inner.item && inner.node.from < inner.item.from && /\\S/.test(line.text.slice(inner.from, inner.to))) {\n                        let insert = inner.blank(countColumn(line.text, 4, inner.to) - countColumn(line.text, 4, inner.from));\n                        if (start == line.from)\n                            insert = normalizeIndent(insert, state);\n                        return { range: EditorSelection.cursor(start + insert.length),\n                            changes: { from: start, to: line.from + inner.to, insert } };\n                    }\n                    // Delete one level of indentation\n                    if (start < pos)\n                        return { range: EditorSelection.cursor(start), changes: { from: start, to: pos } };\n                }\n            }\n        }\n        return dont = { range };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"delete\" }));\n    return true;\n};\n\n/**\nA small keymap with Markdown-specific bindings. Binds Enter to\n[`insertNewlineContinueMarkup`](https://codemirror.net/6/docs/ref/#lang-markdown.insertNewlineContinueMarkup)\nand Backspace to\n[`deleteMarkupBackward`](https://codemirror.net/6/docs/ref/#lang-markdown.deleteMarkupBackward).\n*/\nconst markdownKeymap = [\n    { key: \"Enter\", run: insertNewlineContinueMarkup },\n    { key: \"Backspace\", run: deleteMarkupBackward }\n];\nconst htmlNoMatch = /*@__PURE__*/html({ matchClosingTags: false });\n/**\nMarkdown language support.\n*/\nfunction markdown(config = {}) {\n    let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser } = commonmarkLanguage, completeHTMLTags = true, htmlTagLanguage = htmlNoMatch } = config;\n    if (!(parser instanceof MarkdownParser))\n        throw new RangeError(\"Base parser provided to `markdown` should be a Markdown parser\");\n    let extensions = config.extensions ? [config.extensions] : [];\n    let support = [htmlTagLanguage.support], defaultCode;\n    if (defaultCodeLanguage instanceof LanguageSupport) {\n        support.push(defaultCodeLanguage.support);\n        defaultCode = defaultCodeLanguage.language;\n    }\n    else if (defaultCodeLanguage) {\n        defaultCode = defaultCodeLanguage;\n    }\n    let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : undefined;\n    extensions.push(parseCode({ codeParser, htmlParser: htmlTagLanguage.language.parser }));\n    if (addKeymap)\n        support.push(Prec.high(keymap.of(markdownKeymap)));\n    let lang = mkLang(parser.configure(extensions));\n    if (completeHTMLTags)\n        support.push(lang.data.of({ autocomplete: htmlTagCompletion }));\n    return new LanguageSupport(lang, support);\n}\nfunction htmlTagCompletion(context) {\n    let { state, pos } = context, m = /<[:\\-\\.\\w\\u00b7-\\uffff]*$/.exec(state.sliceDoc(pos - 25, pos));\n    if (!m)\n        return null;\n    let tree = syntaxTree(state).resolveInner(pos, -1);\n    while (tree && !tree.type.isTop) {\n        if (tree.name == \"CodeBlock\" || tree.name == \"FencedCode\" || tree.name == \"ProcessingInstructionBlock\" ||\n            tree.name == \"CommentBlock\" || tree.name == \"Link\" || tree.name == \"Image\")\n            return null;\n        tree = tree.parent;\n    }\n    return {\n        from: pos - m[0].length, to: pos,\n        options: htmlTagCompletions(),\n        validFor: /^<[:\\-\\.\\w\\u00b7-\\uffff]*$/\n    };\n}\nlet _tagCompletions = null;\nfunction htmlTagCompletions() {\n    if (_tagCompletions)\n        return _tagCompletions;\n    let result = htmlCompletionSource(new CompletionContext(EditorState.create({ extensions: htmlNoMatch }), 0, true));\n    return _tagCompletions = result ? result.options : [];\n}\n\nexport { commonmarkLanguage, deleteMarkupBackward, insertNewlineContinueMarkup, markdown, markdownKeymap, markdownLanguage };\n","import { NodeType, NodeProp, NodeSet, Tree, Parser, parseMixed } from '@lezer/common';\nimport { styleTags, tags, Tag } from '@lezer/highlight';\n\nclass CompositeBlock {\n    static create(type, value, from, parentHash, end) {\n        let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;\n        return new CompositeBlock(type, value, from, hash, end, [], []);\n    }\n    constructor(type, \n    // Used for indentation in list items, markup character in lists\n    value, from, hash, end, children, positions) {\n        this.type = type;\n        this.value = value;\n        this.from = from;\n        this.hash = hash;\n        this.end = end;\n        this.children = children;\n        this.positions = positions;\n        this.hashProp = [[NodeProp.contextHash, hash]];\n    }\n    addChild(child, pos) {\n        if (child.prop(NodeProp.contextHash) != this.hash)\n            child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);\n        this.children.push(child);\n        this.positions.push(pos);\n    }\n    toTree(nodeSet, end = this.end) {\n        let last = this.children.length - 1;\n        if (last >= 0)\n            end = Math.max(end, this.positions[last] + this.children[last].length + this.from);\n        return new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({\n            makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)\n        });\n    }\n}\nvar Type;\n(function (Type) {\n    Type[Type[\"Document\"] = 1] = \"Document\";\n    Type[Type[\"CodeBlock\"] = 2] = \"CodeBlock\";\n    Type[Type[\"FencedCode\"] = 3] = \"FencedCode\";\n    Type[Type[\"Blockquote\"] = 4] = \"Blockquote\";\n    Type[Type[\"HorizontalRule\"] = 5] = \"HorizontalRule\";\n    Type[Type[\"BulletList\"] = 6] = \"BulletList\";\n    Type[Type[\"OrderedList\"] = 7] = \"OrderedList\";\n    Type[Type[\"ListItem\"] = 8] = \"ListItem\";\n    Type[Type[\"ATXHeading1\"] = 9] = \"ATXHeading1\";\n    Type[Type[\"ATXHeading2\"] = 10] = \"ATXHeading2\";\n    Type[Type[\"ATXHeading3\"] = 11] = \"ATXHeading3\";\n    Type[Type[\"ATXHeading4\"] = 12] = \"ATXHeading4\";\n    Type[Type[\"ATXHeading5\"] = 13] = \"ATXHeading5\";\n    Type[Type[\"ATXHeading6\"] = 14] = \"ATXHeading6\";\n    Type[Type[\"SetextHeading1\"] = 15] = \"SetextHeading1\";\n    Type[Type[\"SetextHeading2\"] = 16] = \"SetextHeading2\";\n    Type[Type[\"HTMLBlock\"] = 17] = \"HTMLBlock\";\n    Type[Type[\"LinkReference\"] = 18] = \"LinkReference\";\n    Type[Type[\"Paragraph\"] = 19] = \"Paragraph\";\n    Type[Type[\"CommentBlock\"] = 20] = \"CommentBlock\";\n    Type[Type[\"ProcessingInstructionBlock\"] = 21] = \"ProcessingInstructionBlock\";\n    // Inline\n    Type[Type[\"Escape\"] = 22] = \"Escape\";\n    Type[Type[\"Entity\"] = 23] = \"Entity\";\n    Type[Type[\"HardBreak\"] = 24] = \"HardBreak\";\n    Type[Type[\"Emphasis\"] = 25] = \"Emphasis\";\n    Type[Type[\"StrongEmphasis\"] = 26] = \"StrongEmphasis\";\n    Type[Type[\"Link\"] = 27] = \"Link\";\n    Type[Type[\"Image\"] = 28] = \"Image\";\n    Type[Type[\"InlineCode\"] = 29] = \"InlineCode\";\n    Type[Type[\"HTMLTag\"] = 30] = \"HTMLTag\";\n    Type[Type[\"Comment\"] = 31] = \"Comment\";\n    Type[Type[\"ProcessingInstruction\"] = 32] = \"ProcessingInstruction\";\n    Type[Type[\"Autolink\"] = 33] = \"Autolink\";\n    // Smaller tokens\n    Type[Type[\"HeaderMark\"] = 34] = \"HeaderMark\";\n    Type[Type[\"QuoteMark\"] = 35] = \"QuoteMark\";\n    Type[Type[\"ListMark\"] = 36] = \"ListMark\";\n    Type[Type[\"LinkMark\"] = 37] = \"LinkMark\";\n    Type[Type[\"EmphasisMark\"] = 38] = \"EmphasisMark\";\n    Type[Type[\"CodeMark\"] = 39] = \"CodeMark\";\n    Type[Type[\"CodeText\"] = 40] = \"CodeText\";\n    Type[Type[\"CodeInfo\"] = 41] = \"CodeInfo\";\n    Type[Type[\"LinkTitle\"] = 42] = \"LinkTitle\";\n    Type[Type[\"LinkLabel\"] = 43] = \"LinkLabel\";\n    Type[Type[\"URL\"] = 44] = \"URL\";\n})(Type || (Type = {}));\n/**\nData structure used to accumulate a block's content during [leaf\nblock parsing](#BlockParser.leaf).\n*/\nclass LeafBlock {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The start position of the block.\n    */\n    start, \n    /**\n    The block's text content.\n    */\n    content) {\n        this.start = start;\n        this.content = content;\n        /**\n        @internal\n        */\n        this.marks = [];\n        /**\n        The block parsers active for this block.\n        */\n        this.parsers = [];\n    }\n}\n/**\nData structure used during block-level per-line parsing.\n*/\nclass Line {\n    constructor() {\n        /**\n        The line's full text.\n        */\n        this.text = \"\";\n        /**\n        The base indent provided by the composite contexts (that have\n        been handled so far).\n        */\n        this.baseIndent = 0;\n        /**\n        The string position corresponding to the base indent.\n        */\n        this.basePos = 0;\n        /**\n        The number of contexts handled @internal\n        */\n        this.depth = 0;\n        /**\n        Any markers (i.e. block quote markers) parsed for the contexts. @internal\n        */\n        this.markers = [];\n        /**\n        The position of the next non-whitespace character beyond any\n        list, blockquote, or other composite block markers.\n        */\n        this.pos = 0;\n        /**\n        The column of the next non-whitespace character.\n        */\n        this.indent = 0;\n        /**\n        The character code of the character after `pos`.\n        */\n        this.next = -1;\n    }\n    /**\n    @internal\n    */\n    forward() {\n        if (this.basePos > this.pos)\n            this.forwardInner();\n    }\n    /**\n    @internal\n    */\n    forwardInner() {\n        let newPos = this.skipSpace(this.basePos);\n        this.indent = this.countIndent(newPos, this.pos, this.indent);\n        this.pos = newPos;\n        this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);\n    }\n    /**\n    Skip whitespace after the given position, return the position of\n    the next non-space character or the end of the line if there's\n    only space after `from`.\n    */\n    skipSpace(from) { return skipSpace(this.text, from); }\n    /**\n    @internal\n    */\n    reset(text) {\n        this.text = text;\n        this.baseIndent = this.basePos = this.pos = this.indent = 0;\n        this.forwardInner();\n        this.depth = 1;\n        while (this.markers.length)\n            this.markers.pop();\n    }\n    /**\n    Move the line's base position forward to the given position.\n    This should only be called by composite [block\n    parsers](#BlockParser.parse) or [markup skipping\n    functions](#NodeSpec.composite).\n    */\n    moveBase(to) {\n        this.basePos = to;\n        this.baseIndent = this.countIndent(to, this.pos, this.indent);\n    }\n    /**\n    Move the line's base position forward to the given _column_.\n    */\n    moveBaseColumn(indent) {\n        this.baseIndent = indent;\n        this.basePos = this.findColumn(indent);\n    }\n    /**\n    Store a composite-block-level marker. Should be called from\n    [markup skipping functions](#NodeSpec.composite) when they\n    consume any non-whitespace characters.\n    */\n    addMarker(elt) {\n        this.markers.push(elt);\n    }\n    /**\n    Find the column position at `to`, optionally starting at a given\n    position and column.\n    */\n    countIndent(to, from = 0, indent = 0) {\n        for (let i = from; i < to; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return indent;\n    }\n    /**\n    Find the position corresponding to the given column.\n    */\n    findColumn(goal) {\n        let i = 0;\n        for (let indent = 0; i < this.text.length && indent < goal; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return i;\n    }\n    /**\n    @internal\n    */\n    scrub() {\n        if (!this.baseIndent)\n            return this.text;\n        let result = \"\";\n        for (let i = 0; i < this.basePos; i++)\n            result += \" \";\n        return result + this.text.slice(this.basePos);\n    }\n}\nfunction skipForList(bl, cx, line) {\n    if (line.pos == line.text.length ||\n        (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))\n        return true;\n    if (line.indent >= line.baseIndent + 4)\n        return false;\n    let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);\n    return size > 0 &&\n        (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) &&\n        line.text.charCodeAt(line.pos + size - 1) == bl.value;\n}\nconst DefaultSkipMarkup = {\n    [Type.Blockquote](bl, cx, line) {\n        if (line.next != 62 /* '>' */)\n            return false;\n        line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));\n        line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));\n        bl.end = cx.lineStart + line.text.length;\n        return true;\n    },\n    [Type.ListItem](bl, _cx, line) {\n        if (line.indent < line.baseIndent + bl.value && line.next > -1)\n            return false;\n        line.moveBaseColumn(line.baseIndent + bl.value);\n        return true;\n    },\n    [Type.OrderedList]: skipForList,\n    [Type.BulletList]: skipForList,\n    [Type.Document]() { return true; }\n};\nfunction space(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }\nfunction skipSpace(line, i = 0) {\n    while (i < line.length && space(line.charCodeAt(i)))\n        i++;\n    return i;\n}\nfunction skipSpaceBack(line, i, to) {\n    while (i > to && space(line.charCodeAt(i - 1)))\n        i--;\n    return i;\n}\nfunction isFencedCode(line) {\n    if (line.next != 96 && line.next != 126 /* '`~' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    if (pos < line.pos + 3)\n        return -1;\n    if (line.next == 96)\n        for (let i = pos; i < line.text.length; i++)\n            if (line.text.charCodeAt(i) == 96)\n                return -1;\n    return pos;\n}\nfunction isBlockquote(line) {\n    return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;\n}\nfunction isHorizontalRule(line, cx, breaking) {\n    if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)\n        return -1;\n    let count = 1;\n    for (let pos = line.pos + 1; pos < line.text.length; pos++) {\n        let ch = line.text.charCodeAt(pos);\n        if (ch == line.next)\n            count++;\n        else if (!space(ch))\n            return -1;\n    }\n    // Setext headers take precedence\n    if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length &&\n        cx.parser.leafBlockParsers.indexOf(DefaultLeafBlocks.SetextHeading) > -1)\n        return -1;\n    return count < 3 ? -1 : 1;\n}\nfunction inList(cx, type) {\n    for (let i = cx.stack.length - 1; i >= 0; i--)\n        if (cx.stack[i].type == type)\n            return true;\n    return false;\n}\nfunction isBulletList(line, cx, breaking) {\n    return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&\n        (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) &&\n        (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;\n}\nfunction isOrderedList(line, cx, breaking) {\n    let pos = line.pos, next = line.next;\n    for (;;) {\n        if (next >= 48 && next <= 57 /* '0-9' */)\n            pos++;\n        else\n            break;\n        if (pos == line.text.length)\n            return -1;\n        next = line.text.charCodeAt(pos);\n    }\n    if (pos == line.pos || pos > line.pos + 9 ||\n        (next != 46 && next != 41 /* '.)' */) ||\n        (pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1))) ||\n        breaking && !inList(cx, Type.OrderedList) &&\n            (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))\n        return -1;\n    return pos + 1 - line.pos;\n}\nfunction isAtxHeading(line) {\n    if (line.next != 35 /* '#' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == 35)\n        pos++;\n    if (pos < line.text.length && line.text.charCodeAt(pos) != 32)\n        return -1;\n    let size = pos - line.pos;\n    return size > 6 ? -1 : size;\n}\nfunction isSetextUnderline(line) {\n    if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    let end = pos;\n    while (pos < line.text.length && space(line.text.charCodeAt(pos)))\n        pos++;\n    return pos == line.text.length ? end : -1;\n}\nconst EmptyLine = /^[ \\t]*$/, CommentEnd = /-->/, ProcessingEnd = /\\?>/;\nconst HTMLBlockStyle = [\n    [/^<(?:script|pre|style)(?:\\s|>|$)/i, /<\\/(?:script|pre|style)>/i],\n    [/^\\s*<!--/, CommentEnd],\n    [/^\\s*<\\?/, ProcessingEnd],\n    [/^\\s*<![A-Z]/, />/],\n    [/^\\s*<!\\[CDATA\\[/, /\\]\\]>/],\n    [/^\\s*<\\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|\\/?>|$)/i, EmptyLine],\n    [/^\\s*(?:<\\/[a-z][\\w-]*\\s*>|<[a-z][\\w-]*(\\s+[a-z:_][\\w-.]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*>)\\s*$/i, EmptyLine]\n];\nfunction isHTMLBlock(line, _cx, breaking) {\n    if (line.next != 60 /* '<' */)\n        return -1;\n    let rest = line.text.slice(line.pos);\n    for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)\n        if (HTMLBlockStyle[i][0].test(rest))\n            return i;\n    return -1;\n}\nfunction getListIndent(line, pos) {\n    let indentAfter = line.countIndent(pos, line.pos, line.indent);\n    let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);\n    return indented >= indentAfter + 5 ? indentAfter + 1 : indented;\n}\nfunction addCodeText(marks, from, to) {\n    let last = marks.length - 1;\n    if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)\n        marks[last].to = to;\n    else\n        marks.push(elt(Type.CodeText, from, to));\n}\n// Rules for parsing blocks. A return value of false means the rule\n// doesn't apply here, true means it does. When true is returned and\n// `p.line` has been updated, the rule is assumed to have consumed a\n// leaf block. Otherwise, it is assumed to have opened a context.\nconst DefaultBlockParsers = {\n    LinkReference: undefined,\n    IndentedCode(cx, line) {\n        let base = line.baseIndent + 4;\n        if (line.indent < base)\n            return false;\n        let start = line.findColumn(base);\n        let from = cx.lineStart + start, to = cx.lineStart + line.text.length;\n        let marks = [], pendingMarks = [];\n        addCodeText(marks, from, to);\n        while (cx.nextLine() && line.depth >= cx.stack.length) {\n            if (line.pos == line.text.length) { // Empty\n                addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    pendingMarks.push(m);\n            }\n            else if (line.indent < base) {\n                break;\n            }\n            else {\n                if (pendingMarks.length) {\n                    for (let m of pendingMarks) {\n                        if (m.type == Type.CodeText)\n                            addCodeText(marks, m.from, m.to);\n                        else\n                            marks.push(m);\n                    }\n                    pendingMarks = [];\n                }\n                addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                to = cx.lineStart + line.text.length;\n                let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);\n                if (codeStart < to)\n                    addCodeText(marks, codeStart, to);\n            }\n        }\n        if (pendingMarks.length) {\n            pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);\n            if (pendingMarks.length)\n                line.markers = pendingMarks.concat(line.markers);\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);\n        return true;\n    },\n    FencedCode(cx, line) {\n        let fenceEnd = isFencedCode(line);\n        if (fenceEnd < 0)\n            return false;\n        let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;\n        let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);\n        let marks = [elt(Type.CodeMark, from, from + len)];\n        if (infoFrom < infoTo)\n            marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));\n        for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {\n            let i = line.pos;\n            if (line.indent - line.baseIndent < 4)\n                while (i < line.text.length && line.text.charCodeAt(i) == ch)\n                    i++;\n            if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {\n                for (let m of line.markers)\n                    marks.push(m);\n                marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));\n                cx.nextLine();\n                break;\n            }\n            else {\n                if (!first)\n                    addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;\n                if (textStart < textEnd)\n                    addCodeText(marks, textStart, textEnd);\n            }\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from)\n            .finish(Type.FencedCode, cx.prevLineEnd() - from), from);\n        return true;\n    },\n    Blockquote(cx, line) {\n        let size = isBlockquote(line);\n        if (size < 0)\n            return false;\n        cx.startContext(Type.Blockquote, line.pos);\n        cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);\n        line.moveBase(line.pos + size);\n        return null;\n    },\n    HorizontalRule(cx, line) {\n        if (isHorizontalRule(line, cx, false) < 0)\n            return false;\n        let from = cx.lineStart + line.pos;\n        cx.nextLine();\n        cx.addNode(Type.HorizontalRule, from);\n        return true;\n    },\n    BulletList(cx, line) {\n        let size = isBulletList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.BulletList)\n            cx.startContext(Type.BulletList, line.basePos, line.next);\n        let newBase = getListIndent(line, line.pos + 1);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    OrderedList(cx, line) {\n        let size = isOrderedList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.OrderedList)\n            cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));\n        let newBase = getListIndent(line, line.pos + size);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    ATXHeading(cx, line) {\n        let size = isAtxHeading(line);\n        if (size < 0)\n            return false;\n        let off = line.pos, from = cx.lineStart + off;\n        let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;\n        while (after > off && line.text.charCodeAt(after - 1) == line.next)\n            after--;\n        if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1)))\n            after = line.text.length;\n        let buf = cx.buffer\n            .write(Type.HeaderMark, 0, size)\n            .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);\n        if (after < line.text.length)\n            buf.write(Type.HeaderMark, after - off, endOfSpace - off);\n        let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);\n        cx.nextLine();\n        cx.addNode(node, from);\n        return true;\n    },\n    HTMLBlock(cx, line) {\n        let type = isHTMLBlock(line, cx, false);\n        if (type < 0)\n            return false;\n        let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];\n        let marks = [], trailing = end != EmptyLine;\n        while (!end.test(line.text) && cx.nextLine()) {\n            if (line.depth < cx.stack.length) {\n                trailing = false;\n                break;\n            }\n            for (let m of line.markers)\n                marks.push(m);\n        }\n        if (trailing)\n            cx.nextLine();\n        let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;\n        let to = cx.prevLineEnd();\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);\n        return true;\n    },\n    SetextHeading: undefined // Specifies relative precedence for block-continue function\n};\n// This implements a state machine that incrementally parses link references. At each\n// next line, it looks ahead to see if the line continues the reference or not. If it\n// doesn't and a valid link is available ending before that line, it finishes that.\n// Similarly, on `finish` (when the leaf is terminated by external circumstances), it\n// creates a link reference if there's a valid reference up to the current point.\nclass LinkReferenceParser {\n    constructor(leaf) {\n        this.stage = 0 /* RefStage.Start */;\n        this.elts = [];\n        this.pos = 0;\n        this.start = leaf.start;\n        this.advance(leaf.content);\n    }\n    nextLine(cx, line, leaf) {\n        if (this.stage == -1 /* RefStage.Failed */)\n            return false;\n        let content = leaf.content + \"\\n\" + line.scrub();\n        let finish = this.advance(content);\n        if (finish > -1 && finish < content.length)\n            return this.complete(cx, leaf, finish);\n        return false;\n    }\n    finish(cx, leaf) {\n        if ((this.stage == 2 /* RefStage.Link */ || this.stage == 3 /* RefStage.Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)\n            return this.complete(cx, leaf, leaf.content.length);\n        return false;\n    }\n    complete(cx, leaf, len) {\n        cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));\n        return true;\n    }\n    nextStage(elt) {\n        if (elt) {\n            this.pos = elt.to - this.start;\n            this.elts.push(elt);\n            this.stage++;\n            return true;\n        }\n        if (elt === false)\n            this.stage = -1 /* RefStage.Failed */;\n        return false;\n    }\n    advance(content) {\n        for (;;) {\n            if (this.stage == -1 /* RefStage.Failed */) {\n                return -1;\n            }\n            else if (this.stage == 0 /* RefStage.Start */) {\n                if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))\n                    return -1;\n                if (content.charCodeAt(this.pos) != 58 /* ':' */)\n                    return this.stage = -1 /* RefStage.Failed */;\n                this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));\n                this.pos++;\n            }\n            else if (this.stage == 1 /* RefStage.Label */) {\n                if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))\n                    return -1;\n            }\n            else if (this.stage == 2 /* RefStage.Link */) {\n                let skip = skipSpace(content, this.pos), end = 0;\n                if (skip > this.pos) {\n                    let title = parseLinkTitle(content, skip, this.start);\n                    if (title) {\n                        let titleEnd = lineEnd(content, title.to - this.start);\n                        if (titleEnd > 0) {\n                            this.nextStage(title);\n                            end = titleEnd;\n                        }\n                    }\n                }\n                if (!end)\n                    end = lineEnd(content, this.pos);\n                return end > 0 && end < content.length ? end : -1;\n            }\n            else { // RefStage.Title\n                return lineEnd(content, this.pos);\n            }\n        }\n    }\n}\nfunction lineEnd(text, pos) {\n    for (; pos < text.length; pos++) {\n        let next = text.charCodeAt(pos);\n        if (next == 10)\n            break;\n        if (!space(next))\n            return -1;\n    }\n    return pos;\n}\nclass SetextHeadingParser {\n    nextLine(cx, line, leaf) {\n        let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);\n        let next = line.next;\n        if (underline < 0)\n            return false;\n        let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);\n        cx.nextLine();\n        cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [\n            ...cx.parser.parseInline(leaf.content, leaf.start),\n            underlineMark\n        ]));\n        return true;\n    }\n    finish() {\n        return false;\n    }\n}\nconst DefaultLeafBlocks = {\n    LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },\n    SetextHeading() { return new SetextHeadingParser; }\n};\nconst DefaultEndLeaf = [\n    (_, line) => isAtxHeading(line) >= 0,\n    (_, line) => isFencedCode(line) >= 0,\n    (_, line) => isBlockquote(line) >= 0,\n    (p, line) => isBulletList(line, p, true) >= 0,\n    (p, line) => isOrderedList(line, p, true) >= 0,\n    (p, line) => isHorizontalRule(line, p, true) >= 0,\n    (p, line) => isHTMLBlock(line, p, true) >= 0\n];\nconst scanLineResult = { text: \"\", end: 0 };\n/**\nBlock-level parsing functions get access to this context object.\n*/\nclass BlockContext {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The parser configuration used.\n    */\n    parser, \n    /**\n    @internal\n    */\n    input, fragments, \n    /**\n    @internal\n    */\n    ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.line = new Line();\n        this.atEnd = false;\n        /**\n        For reused nodes on gaps, we can't directly put the original\n        node into the tree, since that may be bigger than its parent.\n        When this happens, we create a dummy tree that is replaced by\n        the proper node in `injectGaps` @internal\n        */\n        this.reusePlaceholders = new Map;\n        this.stoppedAt = null;\n        /**\n        The range index that absoluteLineStart points into @internal\n        */\n        this.rangeI = 0;\n        this.to = ranges[ranges.length - 1].to;\n        this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;\n        this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);\n        this.stack = [this.block];\n        this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;\n        this.readLine();\n    }\n    get parsedPos() {\n        return this.absoluteLineStart;\n    }\n    advance() {\n        if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)\n            return this.finish();\n        let { line } = this;\n        for (;;) {\n            for (let markI = 0;;) {\n                let next = line.depth < this.stack.length ? this.stack[this.stack.length - 1] : null;\n                while (markI < line.markers.length && (!next || line.markers[markI].from < next.end)) {\n                    let mark = line.markers[markI++];\n                    this.addNode(mark.type, mark.from, mark.to);\n                }\n                if (!next)\n                    break;\n                this.finishContext();\n            }\n            if (line.pos < line.text.length)\n                break;\n            // Empty line\n            if (!this.nextLine())\n                return this.finish();\n        }\n        if (this.fragments && this.reuseFragment(line.basePos))\n            return null;\n        start: for (;;) {\n            for (let type of this.parser.blockParsers)\n                if (type) {\n                    let result = type(this, line);\n                    if (result != false) {\n                        if (result == true)\n                            return null;\n                        line.forward();\n                        continue start;\n                    }\n                }\n            break;\n        }\n        let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));\n        for (let parse of this.parser.leafBlockParsers)\n            if (parse) {\n                let parser = parse(this, leaf);\n                if (parser)\n                    leaf.parsers.push(parser);\n            }\n        lines: while (this.nextLine()) {\n            if (line.pos == line.text.length)\n                break;\n            if (line.indent < line.baseIndent + 4) {\n                for (let stop of this.parser.endLeafBlock)\n                    if (stop(this, line, leaf))\n                        break lines;\n            }\n            for (let parser of leaf.parsers)\n                if (parser.nextLine(this, line, leaf))\n                    return null;\n            leaf.content += \"\\n\" + line.scrub();\n            for (let m of line.markers)\n                leaf.marks.push(m);\n        }\n        this.finishLeaf(leaf);\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    reuseFragment(start) {\n        if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||\n            !this.fragments.matches(this.block.hash))\n            return false;\n        let taken = this.fragments.takeNodes(this);\n        if (!taken)\n            return false;\n        this.absoluteLineStart += taken;\n        this.lineStart = toRelative(this.absoluteLineStart, this.ranges);\n        this.moveRangeI();\n        if (this.absoluteLineStart < this.to) {\n            this.lineStart++;\n            this.absoluteLineStart++;\n            this.readLine();\n        }\n        else {\n            this.atEnd = true;\n            this.readLine();\n        }\n        return true;\n    }\n    /**\n    The number of parent blocks surrounding the current block.\n    */\n    get depth() {\n        return this.stack.length;\n    }\n    /**\n    Get the type of the parent block at the given depth. When no\n    depth is passed, return the type of the innermost parent.\n    */\n    parentType(depth = this.depth - 1) {\n        return this.parser.nodeSet.types[this.stack[depth].type];\n    }\n    /**\n    Move to the next input line. This should only be called by\n    (non-composite) [block parsers](#BlockParser.parse) that consume\n    the line directly, or leaf block parser\n    [`nextLine`](#LeafBlockParser.nextLine) methods when they\n    consume the current line (and return true).\n    */\n    nextLine() {\n        this.lineStart += this.line.text.length;\n        if (this.absoluteLineEnd >= this.to) {\n            this.absoluteLineStart = this.absoluteLineEnd;\n            this.atEnd = true;\n            this.readLine();\n            return false;\n        }\n        else {\n            this.lineStart++;\n            this.absoluteLineStart = this.absoluteLineEnd + 1;\n            this.moveRangeI();\n            this.readLine();\n            return true;\n        }\n    }\n    /**\n    Retrieve the text of the line after the current one, without\n    actually moving the context's current line forward.\n    */\n    peekLine() {\n        return this.scanLine(this.absoluteLineEnd + 1).text;\n    }\n    moveRangeI() {\n        while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {\n            this.rangeI++;\n            this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);\n        }\n    }\n    /**\n    @internal\n    Collect the text for the next line.\n    */\n    scanLine(start) {\n        let r = scanLineResult;\n        r.end = start;\n        if (start >= this.to) {\n            r.text = \"\";\n        }\n        else {\n            r.text = this.lineChunkAt(start);\n            r.end += r.text.length;\n            if (this.ranges.length > 1) {\n                let textOffset = this.absoluteLineStart, rangeI = this.rangeI;\n                while (this.ranges[rangeI].to < r.end) {\n                    rangeI++;\n                    let nextFrom = this.ranges[rangeI].from;\n                    let after = this.lineChunkAt(nextFrom);\n                    r.end = nextFrom + after.length;\n                    r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;\n                    textOffset = r.end - r.text.length;\n                }\n            }\n        }\n        return r;\n    }\n    /**\n    @internal\n    Populate this.line with the content of the next line. Skip\n    leading characters covered by composite blocks.\n    */\n    readLine() {\n        let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);\n        this.absoluteLineEnd = end;\n        line.reset(text);\n        for (; line.depth < this.stack.length; line.depth++) {\n            let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];\n            if (!handler)\n                throw new Error(\"Unhandled block context \" + Type[cx.type]);\n            if (!handler(cx, this, line))\n                break;\n            line.forward();\n        }\n    }\n    lineChunkAt(pos) {\n        let next = this.input.chunk(pos), text;\n        if (!this.input.lineChunks) {\n            let eol = next.indexOf(\"\\n\");\n            text = eol < 0 ? next : next.slice(0, eol);\n        }\n        else {\n            text = next == \"\\n\" ? \"\" : next;\n        }\n        return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;\n    }\n    /**\n    The end position of the previous line.\n    */\n    prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }\n    /**\n    @internal\n    */\n    startContext(type, start, value = 0) {\n        this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);\n        this.stack.push(this.block);\n    }\n    /**\n    Start a composite block. Should only be called from [block\n    parser functions](#BlockParser.parse) that return null.\n    */\n    startComposite(type, start, value = 0) {\n        this.startContext(this.parser.getNodeType(type), start, value);\n    }\n    /**\n    @internal\n    */\n    addNode(block, from, to) {\n        if (typeof block == \"number\")\n            block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);\n        this.block.addChild(block, from - this.block.from);\n    }\n    /**\n    Add a block element. Can be called by [block\n    parsers](#BlockParser.parse).\n    */\n    addElement(elt) {\n        this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);\n    }\n    /**\n    Add a block element from a [leaf parser](#LeafBlockParser). This\n    makes sure any extra composite block markup (such as blockquote\n    markers) inside the block are also added to the syntax tree.\n    */\n    addLeafElement(leaf, elt) {\n        this.addNode(this.buffer\n            .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)\n            .finish(elt.type, elt.to - elt.from), elt.from);\n    }\n    /**\n    @internal\n    */\n    finishContext() {\n        let cx = this.stack.pop();\n        let top = this.stack[this.stack.length - 1];\n        top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);\n        this.block = top;\n    }\n    finish() {\n        while (this.stack.length > 1)\n            this.finishContext();\n        return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));\n    }\n    addGaps(tree) {\n        return this.ranges.length > 1 ?\n            injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.reusePlaceholders) : tree;\n    }\n    /**\n    @internal\n    */\n    finishLeaf(leaf) {\n        for (let parser of leaf.parsers)\n            if (parser.finish(this, leaf))\n                return;\n        let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);\n        this.addNode(this.buffer\n            .writeElements(inline, -leaf.start)\n            .finish(Type.Paragraph, leaf.content.length), leaf.start);\n    }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n    /**\n    @internal\n    */\n    get buffer() { return new Buffer(this.parser.nodeSet); }\n}\nfunction injectGaps(ranges, rangeI, tree, offset, dummies) {\n    let rangeEnd = ranges[rangeI].to;\n    let children = [], positions = [], start = tree.from + offset;\n    function movePastNext(upto, inclusive) {\n        while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {\n            let size = ranges[rangeI + 1].from - rangeEnd;\n            offset += size;\n            upto += size;\n            rangeI++;\n            rangeEnd = ranges[rangeI].to;\n        }\n    }\n    for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {\n        movePastNext(ch.from + offset, true);\n        let from = ch.from + offset, node, reuse = dummies.get(ch.tree);\n        if (reuse) {\n            node = reuse;\n        }\n        else if (ch.to + offset > rangeEnd) {\n            node = injectGaps(ranges, rangeI, ch, offset, dummies);\n            movePastNext(ch.to + offset, false);\n        }\n        else {\n            node = ch.toTree();\n        }\n        children.push(node);\n        positions.push(from - start);\n    }\n    movePastNext(tree.to + offset, false);\n    return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);\n}\n/**\nA Markdown parser configuration.\n*/\nclass MarkdownParser extends Parser {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The parser's syntax [node\n    types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).\n    */\n    nodeSet, \n    /**\n    @internal\n    */\n    blockParsers, \n    /**\n    @internal\n    */\n    leafBlockParsers, \n    /**\n    @internal\n    */\n    blockNames, \n    /**\n    @internal\n    */\n    endLeafBlock, \n    /**\n    @internal\n    */\n    skipContextMarkup, \n    /**\n    @internal\n    */\n    inlineParsers, \n    /**\n    @internal\n    */\n    inlineNames, \n    /**\n    @internal\n    */\n    wrappers) {\n        super();\n        this.nodeSet = nodeSet;\n        this.blockParsers = blockParsers;\n        this.leafBlockParsers = leafBlockParsers;\n        this.blockNames = blockNames;\n        this.endLeafBlock = endLeafBlock;\n        this.skipContextMarkup = skipContextMarkup;\n        this.inlineParsers = inlineParsers;\n        this.inlineNames = inlineNames;\n        this.wrappers = wrappers;\n        /**\n        @internal\n        */\n        this.nodeTypes = Object.create(null);\n        for (let t of nodeSet.types)\n            this.nodeTypes[t.name] = t.id;\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new BlockContext(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /**\n    Reconfigure the parser.\n    */\n    configure(spec) {\n        let config = resolveConfig(spec);\n        if (!config)\n            return this;\n        let { nodeSet, skipContextMarkup } = this;\n        let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;\n        if (nonEmpty(config.defineNodes)) {\n            skipContextMarkup = Object.assign({}, skipContextMarkup);\n            let nodeTypes = nodeSet.types.slice(), styles;\n            for (let s of config.defineNodes) {\n                let { name, block, composite, style } = typeof s == \"string\" ? { name: s } : s;\n                if (nodeTypes.some(t => t.name == name))\n                    continue;\n                if (composite)\n                    skipContextMarkup[nodeTypes.length] =\n                        (bl, cx, line) => composite(cx, line, bl.value);\n                let id = nodeTypes.length;\n                let group = composite ? [\"Block\", \"BlockContext\"] : !block ? undefined\n                    : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? [\"Block\", \"LeafBlock\", \"Heading\"] : [\"Block\", \"LeafBlock\"];\n                nodeTypes.push(NodeType.define({\n                    id,\n                    name,\n                    props: group && [[NodeProp.group, group]]\n                }));\n                if (style) {\n                    if (!styles)\n                        styles = {};\n                    if (Array.isArray(style) || style instanceof Tag)\n                        styles[name] = style;\n                    else\n                        Object.assign(styles, style);\n                }\n            }\n            nodeSet = new NodeSet(nodeTypes);\n            if (styles)\n                nodeSet = nodeSet.extend(styleTags(styles));\n        }\n        if (nonEmpty(config.props))\n            nodeSet = nodeSet.extend(...config.props);\n        if (nonEmpty(config.remove)) {\n            for (let rm of config.remove) {\n                let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);\n                if (block > -1)\n                    blockParsers[block] = leafBlockParsers[block] = undefined;\n                if (inline > -1)\n                    inlineParsers[inline] = undefined;\n            }\n        }\n        if (nonEmpty(config.parseBlock)) {\n            for (let spec of config.parseBlock) {\n                let found = blockNames.indexOf(spec.name);\n                if (found > -1) {\n                    blockParsers[found] = spec.parse;\n                    leafBlockParsers[found] = spec.leaf;\n                }\n                else {\n                    let pos = spec.before ? findName(blockNames, spec.before)\n                        : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;\n                    blockParsers.splice(pos, 0, spec.parse);\n                    leafBlockParsers.splice(pos, 0, spec.leaf);\n                    blockNames.splice(pos, 0, spec.name);\n                }\n                if (spec.endLeaf)\n                    endLeafBlock.push(spec.endLeaf);\n            }\n        }\n        if (nonEmpty(config.parseInline)) {\n            for (let spec of config.parseInline) {\n                let found = inlineNames.indexOf(spec.name);\n                if (found > -1) {\n                    inlineParsers[found] = spec.parse;\n                }\n                else {\n                    let pos = spec.before ? findName(inlineNames, spec.before)\n                        : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;\n                    inlineParsers.splice(pos, 0, spec.parse);\n                    inlineNames.splice(pos, 0, spec.name);\n                }\n            }\n        }\n        if (config.wrap)\n            wrappers = wrappers.concat(config.wrap);\n        return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);\n    }\n    /**\n    @internal\n    */\n    getNodeType(name) {\n        let found = this.nodeTypes[name];\n        if (found == null)\n            throw new RangeError(`Unknown node type '${name}'`);\n        return found;\n    }\n    /**\n    Parse the given piece of inline text at the given offset,\n    returning an array of [`Element`](#Element) objects representing\n    the inline content.\n    */\n    parseInline(text, offset) {\n        let cx = new InlineContext(this, text, offset);\n        outer: for (let pos = offset; pos < cx.end;) {\n            let next = cx.char(pos);\n            for (let token of this.inlineParsers)\n                if (token) {\n                    let result = token(cx, next, pos);\n                    if (result >= 0) {\n                        pos = result;\n                        continue outer;\n                    }\n                }\n            pos++;\n        }\n        return cx.resolveMarkers(0);\n    }\n}\nfunction nonEmpty(a) {\n    return a != null && a.length > 0;\n}\nfunction resolveConfig(spec) {\n    if (!Array.isArray(spec))\n        return spec;\n    if (spec.length == 0)\n        return null;\n    let conf = resolveConfig(spec[0]);\n    if (spec.length == 1)\n        return conf;\n    let rest = resolveConfig(spec.slice(1));\n    if (!rest || !conf)\n        return conf || rest;\n    let conc = (a, b) => (a || none).concat(b || none);\n    let wrapA = conf.wrap, wrapB = rest.wrap;\n    return {\n        props: conc(conf.props, rest.props),\n        defineNodes: conc(conf.defineNodes, rest.defineNodes),\n        parseBlock: conc(conf.parseBlock, rest.parseBlock),\n        parseInline: conc(conf.parseInline, rest.parseInline),\n        remove: conc(conf.remove, rest.remove),\n        wrap: !wrapA ? wrapB : !wrapB ? wrapA :\n            (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)\n    };\n}\nfunction findName(names, name) {\n    let found = names.indexOf(name);\n    if (found < 0)\n        throw new RangeError(`Position specified relative to unknown parser ${name}`);\n    return found;\n}\nlet nodeTypes = [NodeType.none];\nfor (let i = 1, name; name = Type[i]; i++) {\n    nodeTypes[i] = NodeType.define({\n        id: i,\n        name,\n        props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? [\"Block\", \"BlockContext\"] : [\"Block\", \"LeafBlock\"]]],\n        top: name == \"Document\"\n    });\n}\nconst none = [];\nclass Buffer {\n    constructor(nodeSet) {\n        this.nodeSet = nodeSet;\n        this.content = [];\n        this.nodes = [];\n    }\n    write(type, from, to, children = 0) {\n        this.content.push(type, from, to, 4 + children * 4);\n        return this;\n    }\n    writeElements(elts, offset = 0) {\n        for (let e of elts)\n            e.writeTo(this, offset);\n        return this;\n    }\n    finish(type, length) {\n        return Tree.build({\n            buffer: this.content,\n            nodeSet: this.nodeSet,\n            reused: this.nodes,\n            topID: type,\n            length\n        });\n    }\n}\n/**\nElements are used to compose syntax nodes during parsing.\n*/\nclass Element {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The node's\n    [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).\n    */\n    type, \n    /**\n    The start of the node, as an offset from the start of the document.\n    */\n    from, \n    /**\n    The end of the node.\n    */\n    to, \n    /**\n    The node's child nodes @internal\n    */\n    children = none) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.children = children;\n    }\n    /**\n    @internal\n    */\n    writeTo(buf, offset) {\n        let startOff = buf.content.length;\n        buf.writeElements(this.children, offset);\n        buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);\n    }\n    /**\n    @internal\n    */\n    toTree(nodeSet) {\n        return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);\n    }\n}\nclass TreeElement {\n    constructor(tree, from) {\n        this.tree = tree;\n        this.from = from;\n    }\n    get to() { return this.from + this.tree.length; }\n    get type() { return this.tree.type.id; }\n    get children() { return none; }\n    writeTo(buf, offset) {\n        buf.nodes.push(this.tree);\n        buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);\n    }\n    toTree() { return this.tree; }\n}\nfunction elt(type, from, to, children) {\n    return new Element(type, from, to, children);\n}\nconst EmphasisUnderscore = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst EmphasisAsterisk = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst LinkStart = {}, ImageStart = {};\nclass InlineDelimiter {\n    constructor(type, from, to, side) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.side = side;\n    }\n}\nconst Escapable = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\";\nlet Punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\u2010-\\u2027]/;\ntry {\n    Punctuation = new RegExp(\"[\\\\p{S}|\\\\p{P}]\", \"u\");\n}\ncatch (_) { }\nconst DefaultInline = {\n    Escape(cx, next, start) {\n        if (next != 92 /* '\\\\' */ || start == cx.end - 1)\n            return -1;\n        let escaped = cx.char(start + 1);\n        for (let i = 0; i < Escapable.length; i++)\n            if (Escapable.charCodeAt(i) == escaped)\n                return cx.append(elt(Type.Escape, start, start + 2));\n        return -1;\n    },\n    Entity(cx, next, start) {\n        if (next != 38 /* '&' */)\n            return -1;\n        let m = /^(?:#\\d+|#x[a-f\\d]+|\\w+);/i.exec(cx.slice(start + 1, start + 31));\n        return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;\n    },\n    InlineCode(cx, next, start) {\n        if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)\n            return -1;\n        let pos = start + 1;\n        while (pos < cx.end && cx.char(pos) == 96)\n            pos++;\n        let size = pos - start, curSize = 0;\n        for (; pos < cx.end; pos++) {\n            if (cx.char(pos) == 96) {\n                curSize++;\n                if (curSize == size && cx.char(pos + 1) != 96)\n                    return cx.append(elt(Type.InlineCode, start, pos + 1, [\n                        elt(Type.CodeMark, start, start + size),\n                        elt(Type.CodeMark, pos + 1 - size, pos + 1)\n                    ]));\n            }\n            else {\n                curSize = 0;\n            }\n        }\n        return -1;\n    },\n    HTMLTag(cx, next, start) {\n        if (next != 60 /* '<' */ || start == cx.end - 1)\n            return -1;\n        let after = cx.slice(start + 1, cx.end);\n        let url = /^(?:[a-z][-\\w+.]+:[^\\s>]+|[a-z\\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?(?:\\.[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?)*)>/i.exec(after);\n        if (url) {\n            return cx.append(elt(Type.Autolink, start, start + 1 + url[0].length, [\n                elt(Type.LinkMark, start, start + 1),\n                // url[0] includes the closing bracket, so exclude it from this slice\n                elt(Type.URL, start + 1, start + url[0].length),\n                elt(Type.LinkMark, start + url[0].length, start + 1 + url[0].length)\n            ]));\n        }\n        let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);\n        if (comment)\n            return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));\n        let procInst = /^\\?[^]*?\\?>/.exec(after);\n        if (procInst)\n            return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));\n        let m = /^(?:![A-Z][^]*?>|!\\[CDATA\\[[^]*?\\]\\]>|\\/\\s*[a-zA-Z][\\w-]*\\s*>|\\s*[a-zA-Z][\\w-]*(\\s+[a-zA-Z:_][\\w-.:]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*(\\/\\s*)?>)/.exec(after);\n        if (!m)\n            return -1;\n        return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));\n    },\n    Emphasis(cx, next, start) {\n        if (next != 95 && next != 42)\n            return -1;\n        let pos = start + 1;\n        while (cx.char(pos) == next)\n            pos++;\n        let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);\n        let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n        let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n        let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);\n        let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);\n        let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);\n        let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);\n        return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (canClose ? 2 /* Mark.Close */ : 0 /* Mark.None */)));\n    },\n    HardBreak(cx, next, start) {\n        if (next == 92 /* '\\\\' */ && cx.char(start + 1) == 10 /* '\\n' */)\n            return cx.append(elt(Type.HardBreak, start, start + 2));\n        if (next == 32) {\n            let pos = start + 1;\n            while (cx.char(pos) == 32)\n                pos++;\n            if (cx.char(pos) == 10 && pos >= start + 2)\n                return cx.append(elt(Type.HardBreak, start, pos + 1));\n        }\n        return -1;\n    },\n    Link(cx, next, start) {\n        return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Mark.Open */)) : -1;\n    },\n    Image(cx, next, start) {\n        return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */\n            ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Mark.Open */)) : -1;\n    },\n    LinkEnd(cx, next, start) {\n        if (next != 93 /* ']' */)\n            return -1;\n        // Scanning back to the next link/image start marker\n        for (let i = cx.parts.length - 1; i >= 0; i--) {\n            let part = cx.parts[i];\n            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {\n                // If this one has been set invalid (because it would produce\n                // a nested link) or there's no valid link here ignore both.\n                if (!part.side || cx.skipSpace(part.to) == start && !/[(\\[]/.test(cx.slice(start + 1, start + 2))) {\n                    cx.parts[i] = null;\n                    return -1;\n                }\n                // Finish the content and replace the entire range in\n                // this.parts with the link/image node.\n                let content = cx.takeContent(i);\n                let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);\n                // Set any open-link markers before this link to invalid.\n                if (part.type == LinkStart)\n                    for (let j = 0; j < i; j++) {\n                        let p = cx.parts[j];\n                        if (p instanceof InlineDelimiter && p.type == LinkStart)\n                            p.side = 0 /* Mark.None */;\n                    }\n                return link.to;\n            }\n        }\n        return -1;\n    }\n};\nfunction finishLink(cx, content, type, start, startPos) {\n    let { text } = cx, next = cx.char(startPos), endPos = startPos;\n    content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));\n    content.push(elt(Type.LinkMark, startPos - 1, startPos));\n    if (next == 40 /* '(' */) {\n        let pos = cx.skipSpace(startPos + 1);\n        let dest = parseURL(text, pos - cx.offset, cx.offset), title;\n        if (dest) {\n            pos = cx.skipSpace(dest.to);\n            // The destination and title must be separated by whitespace\n            if (pos != dest.to) {\n                title = parseLinkTitle(text, pos - cx.offset, cx.offset);\n                if (title)\n                    pos = cx.skipSpace(title.to);\n            }\n        }\n        if (cx.char(pos) == 41 /* ')' */) {\n            content.push(elt(Type.LinkMark, startPos, startPos + 1));\n            endPos = pos + 1;\n            if (dest)\n                content.push(dest);\n            if (title)\n                content.push(title);\n            content.push(elt(Type.LinkMark, pos, endPos));\n        }\n    }\n    else if (next == 91 /* '[' */) {\n        let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);\n        if (label) {\n            content.push(label);\n            endPos = label.to;\n        }\n    }\n    return elt(type, start, endPos, content);\n}\n// These return `null` when falling off the end of the input, `false`\n// when parsing fails otherwise (for use in the incremental link\n// reference parser).\nfunction parseURL(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next == 60 /* '<' */) {\n        for (let pos = start + 1; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (ch == 62 /* '>' */)\n                return elt(Type.URL, start + offset, pos + 1 + offset);\n            if (ch == 60 || ch == 10 /* '<\\n' */)\n                return false;\n        }\n        return null;\n    }\n    else {\n        let depth = 0, pos = start;\n        for (let escaped = false; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (space(ch)) {\n                break;\n            }\n            else if (escaped) {\n                escaped = false;\n            }\n            else if (ch == 40 /* '(' */) {\n                depth++;\n            }\n            else if (ch == 41 /* ')' */) {\n                if (!depth)\n                    break;\n                depth--;\n            }\n            else if (ch == 92 /* '\\\\' */) {\n                escaped = true;\n            }\n        }\n        return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;\n    }\n}\nfunction parseLinkTitle(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next != 39 && next != 34 && next != 40 /* '\"\\'(' */)\n        return false;\n    let end = next == 40 ? 41 : next;\n    for (let pos = start + 1, escaped = false; pos < text.length; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == end)\n            return elt(Type.LinkTitle, start + offset, pos + 1 + offset);\n        else if (ch == 92 /* '\\\\' */)\n            escaped = true;\n    }\n    return null;\n}\nfunction parseLinkLabel(text, start, offset, requireNonWS) {\n    for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == 93 /* ']' */)\n            return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);\n        else {\n            if (requireNonWS && !space(ch))\n                requireNonWS = false;\n            if (ch == 91 /* '[' */)\n                return false;\n            else if (ch == 92 /* '\\\\' */)\n                escaped = true;\n        }\n    }\n    return null;\n}\n/**\nInline parsing functions get access to this context, and use it to\nread the content and emit syntax nodes.\n*/\nclass InlineContext {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The parser that is being used.\n    */\n    parser, \n    /**\n    The text of this inline section.\n    */\n    text, \n    /**\n    The starting offset of the section in the document.\n    */\n    offset) {\n        this.parser = parser;\n        this.text = text;\n        this.offset = offset;\n        /**\n        @internal\n        */\n        this.parts = [];\n    }\n    /**\n    Get the character code at the given (document-relative)\n    position.\n    */\n    char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }\n    /**\n    The position of the end of this inline section.\n    */\n    get end() { return this.offset + this.text.length; }\n    /**\n    Get a substring of this inline section. Again uses\n    document-relative positions.\n    */\n    slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }\n    /**\n    @internal\n    */\n    append(elt) {\n        this.parts.push(elt);\n        return elt.to;\n    }\n    /**\n    Add a [delimiter](#DelimiterType) at this given position. `open`\n    and `close` indicate whether this delimiter is opening, closing,\n    or both. Returns the end of the delimiter, for convenient\n    returning from [parse functions](#InlineParser.parse).\n    */\n    addDelimiter(type, from, to, open, close) {\n        return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (close ? 2 /* Mark.Close */ : 0 /* Mark.None */)));\n    }\n    /**\n    Returns true when there is an unmatched link or image opening\n    token before the current position.\n    */\n    get hasOpenLink() {\n        for (let i = this.parts.length - 1; i >= 0; i--) {\n            let part = this.parts[i];\n            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart))\n                return true;\n        }\n        return false;\n    }\n    /**\n    Add an inline element. Returns the end of the element.\n    */\n    addElement(elt) {\n        return this.append(elt);\n    }\n    /**\n    Resolve markers between this.parts.length and from, wrapping matched markers in the\n    appropriate node and updating the content of this.parts. @internal\n    */\n    resolveMarkers(from) {\n        // Scan forward, looking for closing tokens\n        for (let i = from; i < this.parts.length; i++) {\n            let close = this.parts[i];\n            if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Mark.Close */)))\n                continue;\n            let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;\n            let closeSize = close.to - close.from;\n            let open, j = i - 1;\n            // Continue scanning for a matching opening token\n            for (; j >= from; j--) {\n                let part = this.parts[j];\n                if (part instanceof InlineDelimiter && (part.side & 1 /* Mark.Open */) && part.type == close.type &&\n                    // Ignore emphasis delimiters where the character count doesn't match\n                    !(emp && ((close.side & 1 /* Mark.Open */) || (part.side & 2 /* Mark.Close */)) &&\n                        (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {\n                    open = part;\n                    break;\n                }\n            }\n            if (!open)\n                continue;\n            let type = close.type.resolve, content = [];\n            let start = open.from, end = close.to;\n            // Emphasis marker effect depends on the character count. Size consumed is minimum of the two\n            // markers.\n            if (emp) {\n                let size = Math.min(2, open.to - open.from, closeSize);\n                start = open.to - size;\n                end = close.from + size;\n                type = size == 1 ? \"Emphasis\" : \"StrongEmphasis\";\n            }\n            // Move the covered region into content, optionally adding marker nodes\n            if (open.type.mark)\n                content.push(this.elt(open.type.mark, start, open.to));\n            for (let k = j + 1; k < i; k++) {\n                if (this.parts[k] instanceof Element)\n                    content.push(this.parts[k]);\n                this.parts[k] = null;\n            }\n            if (close.type.mark)\n                content.push(this.elt(close.type.mark, close.from, end));\n            let element = this.elt(type, start, end, content);\n            // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.\n            this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;\n            let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;\n            // Insert the new element in this.parts\n            if (keep)\n                this.parts.splice(i, 0, element);\n            else\n                this.parts[i] = element;\n        }\n        // Collect the elements remaining in this.parts into an array.\n        let result = [];\n        for (let i = from; i < this.parts.length; i++) {\n            let part = this.parts[i];\n            if (part instanceof Element)\n                result.push(part);\n        }\n        return result;\n    }\n    /**\n    Find an opening delimiter of the given type. Returns `null` if\n    no delimiter is found, or an index that can be passed to\n    [`takeContent`](#InlineContext.takeContent) otherwise.\n    */\n    findOpeningDelimiter(type) {\n        for (let i = this.parts.length - 1; i >= 0; i--) {\n            let part = this.parts[i];\n            if (part instanceof InlineDelimiter && part.type == type)\n                return i;\n        }\n        return null;\n    }\n    /**\n    Remove all inline elements and delimiters starting from the\n    given index (which you should get from\n    [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),\n    resolve delimiters inside of them, and return them as an array\n    of elements.\n    */\n    takeContent(startIndex) {\n        let content = this.resolveMarkers(startIndex);\n        this.parts.length = startIndex;\n        return content;\n    }\n    /**\n    Skip space after the given (document) position, returning either\n    the position of the next non-space character or the end of the\n    section.\n    */\n    skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n}\nfunction injectMarks(elements, marks) {\n    if (!marks.length)\n        return elements;\n    if (!elements.length)\n        return marks;\n    let elts = elements.slice(), eI = 0;\n    for (let mark of marks) {\n        while (eI < elts.length && elts[eI].to < mark.to)\n            eI++;\n        if (eI < elts.length && elts[eI].from < mark.from) {\n            let e = elts[eI];\n            if (e instanceof Element)\n                elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));\n        }\n        else {\n            elts.splice(eI++, 0, mark);\n        }\n    }\n    return elts;\n}\n// These are blocks that can span blank lines, and should thus only be\n// reused if their next sibling is also being reused.\nconst NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];\nclass FragmentCursor {\n    constructor(fragments, input) {\n        this.fragments = fragments;\n        this.input = input;\n        // Index into fragment array\n        this.i = 0;\n        // Active fragment\n        this.fragment = null;\n        this.fragmentEnd = -1;\n        // Cursor into the current fragment, if any. When `moveTo` returns\n        // true, this points at the first block after `pos`.\n        this.cursor = null;\n        if (fragments.length)\n            this.fragment = fragments[this.i++];\n    }\n    nextFragment() {\n        this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;\n        this.cursor = null;\n        this.fragmentEnd = -1;\n    }\n    moveTo(pos, lineStart) {\n        while (this.fragment && this.fragment.to <= pos)\n            this.nextFragment();\n        if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))\n            return false;\n        if (this.fragmentEnd < 0) {\n            let end = this.fragment.to;\n            while (end > 0 && this.input.read(end - 1, end) != \"\\n\")\n                end--;\n            this.fragmentEnd = end ? end - 1 : 0;\n        }\n        let c = this.cursor;\n        if (!c) {\n            c = this.cursor = this.fragment.tree.cursor();\n            c.firstChild();\n        }\n        let rPos = pos + this.fragment.offset;\n        while (c.to <= rPos)\n            if (!c.parent())\n                return false;\n        for (;;) {\n            if (c.from >= rPos)\n                return this.fragment.from <= lineStart;\n            if (!c.childAfter(rPos))\n                return false;\n        }\n    }\n    matches(hash) {\n        let tree = this.cursor.tree;\n        return tree && tree.prop(NodeProp.contextHash) == hash;\n    }\n    takeNodes(cx) {\n        let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);\n        let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;\n        let prevEnd = end, prevI = blockI;\n        for (;;) {\n            if (cur.to - off > fragEnd) {\n                if (cur.type.isAnonymous && cur.firstChild())\n                    continue;\n                break;\n            }\n            let pos = toRelative(cur.from - off, cx.ranges);\n            if (cur.to - off <= cx.ranges[cx.rangeI].to) { // Fits in current range\n                cx.addNode(cur.tree, pos);\n            }\n            else {\n                let dummy = new Tree(cx.parser.nodeSet.types[Type.Paragraph], [], [], 0, cx.block.hashProp);\n                cx.reusePlaceholders.set(dummy, cur.tree);\n                cx.addNode(dummy, pos);\n            }\n            // Taken content must always end in a block, because incremental\n            // parsing happens on block boundaries. Never stop directly\n            // after an indented code block, since those can continue after\n            // any number of blank lines.\n            if (cur.type.is(\"Block\")) {\n                if (NotLast.indexOf(cur.type.id) < 0) {\n                    end = cur.to - off;\n                    blockI = cx.block.children.length;\n                }\n                else {\n                    end = prevEnd;\n                    blockI = prevI;\n                    prevEnd = cur.to - off;\n                    prevI = cx.block.children.length;\n                }\n            }\n            if (!cur.nextSibling())\n                break;\n        }\n        while (cx.block.children.length > blockI) {\n            cx.block.children.pop();\n            cx.block.positions.pop();\n        }\n        return end - start;\n    }\n}\n// Convert an input-stream-relative position to a\n// Markdown-doc-relative position by subtracting the size of all input\n// gaps before `abs`.\nfunction toRelative(abs, ranges) {\n    let pos = abs;\n    for (let i = 1; i < ranges.length; i++) {\n        let gapFrom = ranges[i - 1].to, gapTo = ranges[i].from;\n        if (gapFrom < abs)\n            pos -= gapTo - gapFrom;\n    }\n    return pos;\n}\nconst markdownHighlighting = styleTags({\n    \"Blockquote/...\": tags.quote,\n    HorizontalRule: tags.contentSeparator,\n    \"ATXHeading1/... SetextHeading1/...\": tags.heading1,\n    \"ATXHeading2/... SetextHeading2/...\": tags.heading2,\n    \"ATXHeading3/...\": tags.heading3,\n    \"ATXHeading4/...\": tags.heading4,\n    \"ATXHeading5/...\": tags.heading5,\n    \"ATXHeading6/...\": tags.heading6,\n    \"Comment CommentBlock\": tags.comment,\n    Escape: tags.escape,\n    Entity: tags.character,\n    \"Emphasis/...\": tags.emphasis,\n    \"StrongEmphasis/...\": tags.strong,\n    \"Link/... Image/...\": tags.link,\n    \"OrderedList/... BulletList/...\": tags.list,\n    \"BlockQuote/...\": tags.quote,\n    \"InlineCode CodeText\": tags.monospace,\n    \"URL Autolink\": tags.url,\n    \"HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark\": tags.processingInstruction,\n    \"CodeInfo LinkLabel\": tags.labelName,\n    LinkTitle: tags.string,\n    Paragraph: tags.content\n});\n/**\nThe default CommonMark parser.\n*/\nconst parser = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);\n\nfunction leftOverSpace(node, from, to) {\n    let ranges = [];\n    for (let n = node.firstChild, pos = from;; n = n.nextSibling) {\n        let nextPos = n ? n.from : to;\n        if (nextPos > pos)\n            ranges.push({ from: pos, to: nextPos });\n        if (!n)\n            break;\n        pos = n.to;\n    }\n    return ranges;\n}\n/**\nCreate a Markdown extension to enable nested parsing on code\nblocks and/or embedded HTML.\n*/\nfunction parseCode(config) {\n    let { codeParser, htmlParser } = config;\n    let wrap = parseMixed((node, input) => {\n        let id = node.type.id;\n        if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {\n            let info = \"\";\n            if (id == Type.FencedCode) {\n                let infoNode = node.node.getChild(Type.CodeInfo);\n                if (infoNode)\n                    info = input.read(infoNode.from, infoNode.to);\n            }\n            let parser = codeParser(info);\n            if (parser)\n                return { parser, overlay: node => node.type.id == Type.CodeText };\n        }\n        else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag || id == Type.CommentBlock)) {\n            return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };\n        }\n        return null;\n    });\n    return { wrap };\n}\n\nconst StrikethroughDelim = { resolve: \"Strikethrough\", mark: \"StrikethroughMark\" };\n/**\nAn extension that implements\n[GFM-style](https://github.github.com/gfm/#strikethrough-extension-)\nStrikethrough syntax using `~~` delimiters.\n*/\nconst Strikethrough = {\n    defineNodes: [{\n            name: \"Strikethrough\",\n            style: { \"Strikethrough/...\": tags.strikethrough }\n        }, {\n            name: \"StrikethroughMark\",\n            style: tags.processingInstruction\n        }],\n    parseInline: [{\n            name: \"Strikethrough\",\n            parse(cx, next, pos) {\n                if (next != 126 /* '~' */ || cx.char(pos + 1) != 126 || cx.char(pos + 2) == 126)\n                    return -1;\n                let before = cx.slice(pos - 1, pos), after = cx.slice(pos + 2, pos + 3);\n                let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n                let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n                return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));\n            },\n            after: \"Emphasis\"\n        }]\n};\n// Parse a line as a table row and return the row count. When `elts`\n// is given, push syntax elements for the content onto it.\nfunction parseRow(cx, line, startI = 0, elts, offset = 0) {\n    let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;\n    let parseCell = () => {\n        elts.push(cx.elt(\"TableCell\", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));\n    };\n    for (let i = startI; i < line.length; i++) {\n        let next = line.charCodeAt(i);\n        if (next == 124 /* '|' */ && !esc) {\n            if (!first || cellStart > -1)\n                count++;\n            first = false;\n            if (elts) {\n                if (cellStart > -1)\n                    parseCell();\n                elts.push(cx.elt(\"TableDelimiter\", i + offset, i + offset + 1));\n            }\n            cellStart = cellEnd = -1;\n        }\n        else if (esc || next != 32 && next != 9) {\n            if (cellStart < 0)\n                cellStart = i;\n            cellEnd = i + 1;\n        }\n        esc = !esc && next == 92;\n    }\n    if (cellStart > -1) {\n        count++;\n        if (elts)\n            parseCell();\n    }\n    return count;\n}\nfunction hasPipe(str, start) {\n    for (let i = start; i < str.length; i++) {\n        let next = str.charCodeAt(i);\n        if (next == 124 /* '|' */)\n            return true;\n        if (next == 92 /* '\\\\' */)\n            i++;\n    }\n    return false;\n}\nconst delimiterLine = /^\\|?(\\s*:?-+:?\\s*\\|)+(\\s*:?-+:?\\s*)?$/;\nclass TableParser {\n    constructor() {\n        // Null means we haven't seen the second line yet, false means this\n        // isn't a table, and an array means this is a table and we've\n        // parsed the given rows so far.\n        this.rows = null;\n    }\n    nextLine(cx, line, leaf) {\n        if (this.rows == null) { // Second line\n            this.rows = false;\n            let lineText;\n            if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&\n                delimiterLine.test(lineText = line.text.slice(line.pos))) {\n                let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);\n                if (firstCount == parseRow(cx, lineText, line.pos))\n                    this.rows = [cx.elt(\"TableHeader\", leaf.start, leaf.start + leaf.content.length, firstRow),\n                        cx.elt(\"TableDelimiter\", cx.lineStart + line.pos, cx.lineStart + line.text.length)];\n            }\n        }\n        else if (this.rows) { // Line after the second\n            let content = [];\n            parseRow(cx, line.text, line.pos, content, cx.lineStart);\n            this.rows.push(cx.elt(\"TableRow\", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));\n        }\n        return false;\n    }\n    finish(cx, leaf) {\n        if (!this.rows)\n            return false;\n        cx.addLeafElement(leaf, cx.elt(\"Table\", leaf.start, leaf.start + leaf.content.length, this.rows));\n        return true;\n    }\n}\n/**\nThis extension provides\n[GFM-style](https://github.github.com/gfm/#tables-extension-)\ntables, using syntax like this:\n\n```\n| head 1 | head 2 |\n| ---    | ---    |\n| cell 1 | cell 2 |\n```\n*/\nconst Table = {\n    defineNodes: [\n        { name: \"Table\", block: true },\n        { name: \"TableHeader\", style: { \"TableHeader/...\": tags.heading } },\n        \"TableRow\",\n        { name: \"TableCell\", style: tags.content },\n        { name: \"TableDelimiter\", style: tags.processingInstruction },\n    ],\n    parseBlock: [{\n            name: \"Table\",\n            leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },\n            endLeaf(cx, line, leaf) {\n                if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos))\n                    return false;\n                let next = cx.peekLine();\n                return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);\n            },\n            before: \"SetextHeading\"\n        }]\n};\nclass TaskParser {\n    nextLine() { return false; }\n    finish(cx, leaf) {\n        cx.addLeafElement(leaf, cx.elt(\"Task\", leaf.start, leaf.start + leaf.content.length, [\n            cx.elt(\"TaskMarker\", leaf.start, leaf.start + 3),\n            ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)\n        ]));\n        return true;\n    }\n}\n/**\nExtension providing\n[GFM-style](https://github.github.com/gfm/#task-list-items-extension-)\ntask list items, where list items can be prefixed with `[ ]` or\n`[x]` to add a checkbox.\n*/\nconst TaskList = {\n    defineNodes: [\n        { name: \"Task\", block: true, style: tags.list },\n        { name: \"TaskMarker\", style: tags.atom }\n    ],\n    parseBlock: [{\n            name: \"TaskList\",\n            leaf(cx, leaf) {\n                return /^\\[[ xX]\\][ \\t]/.test(leaf.content) && cx.parentType().name == \"ListItem\" ? new TaskParser : null;\n            },\n            after: \"SetextHeading\"\n        }]\n};\nconst autolinkRE = /(www\\.)|(https?:\\/\\/)|([\\w.+-]{1,100}@)|(mailto:|xmpp:)/gy;\nconst urlRE = /[\\w-]+(\\.[\\w-]+)+(\\/[^\\s<]*)?/gy;\nconst lastTwoDomainWords = /[\\w-]+\\.[\\w-]+($|\\/)/;\nconst emailRE = /[\\w.+-]+@[\\w-]+(\\.[\\w.-]+)+/gy;\nconst xmppResourceRE = /\\/[a-zA-Z\\d@.]+/gy;\nfunction count(str, from, to, ch) {\n    let result = 0;\n    for (let i = from; i < to; i++)\n        if (str[i] == ch)\n            result++;\n    return result;\n}\nfunction autolinkURLEnd(text, from) {\n    urlRE.lastIndex = from;\n    let m = urlRE.exec(text);\n    if (!m || lastTwoDomainWords.exec(m[0])[0].indexOf(\"_\") > -1)\n        return -1;\n    let end = from + m[0].length;\n    for (;;) {\n        let last = text[end - 1], m;\n        if (/[?!.,:*_~]/.test(last) ||\n            last == \")\" && count(text, from, end, \")\") > count(text, from, end, \"(\"))\n            end--;\n        else if (last == \";\" && (m = /&(?:#\\d+|#x[a-f\\d]+|\\w+);$/.exec(text.slice(from, end))))\n            end = from + m.index;\n        else\n            break;\n    }\n    return end;\n}\nfunction autolinkEmailEnd(text, from) {\n    emailRE.lastIndex = from;\n    let m = emailRE.exec(text);\n    if (!m)\n        return -1;\n    let last = m[0][m[0].length - 1];\n    return last == \"_\" || last == \"-\" ? -1 : from + m[0].length - (last == \".\" ? 1 : 0);\n}\n/**\nExtension that implements autolinking for\n`www.`/`http://`/`https://`/`mailto:`/`xmpp:` URLs and email\naddresses.\n*/\nconst Autolink = {\n    parseInline: [{\n            name: \"Autolink\",\n            parse(cx, next, absPos) {\n                let pos = absPos - cx.offset;\n                if (pos && /\\w/.test(cx.text[pos - 1]))\n                    return -1;\n                autolinkRE.lastIndex = pos;\n                let m = autolinkRE.exec(cx.text), end = -1;\n                if (!m)\n                    return -1;\n                if (m[1] || m[2]) { // www., http://\n                    end = autolinkURLEnd(cx.text, pos + m[0].length);\n                    if (end > -1 && cx.hasOpenLink) {\n                        let noBracket = /([^\\[\\]]|\\[[^\\]]*\\])*/.exec(cx.text.slice(pos, end));\n                        end = pos + noBracket[0].length;\n                    }\n                }\n                else if (m[3]) { // email address\n                    end = autolinkEmailEnd(cx.text, pos);\n                }\n                else { // mailto:/xmpp:\n                    end = autolinkEmailEnd(cx.text, pos + m[0].length);\n                    if (end > -1 && m[0] == \"xmpp:\") {\n                        xmppResourceRE.lastIndex = end;\n                        m = xmppResourceRE.exec(cx.text);\n                        if (m)\n                            end = m.index + m[0].length;\n                    }\n                }\n                if (end < 0)\n                    return -1;\n                cx.addElement(cx.elt(\"URL\", absPos, end + cx.offset));\n                return end + cx.offset;\n            }\n        }]\n};\n/**\nExtension bundle containing [`Table`](#Table),\n[`TaskList`](#TaskList), [`Strikethrough`](#Strikethrough), and\n[`Autolink`](#Autolink).\n*/\nconst GFM = [Table, TaskList, Strikethrough, Autolink];\nfunction parseSubSuper(ch, node, mark) {\n    return (cx, next, pos) => {\n        if (next != ch || cx.char(pos + 1) == ch)\n            return -1;\n        let elts = [cx.elt(mark, pos, pos + 1)];\n        for (let i = pos + 1; i < cx.end; i++) {\n            let next = cx.char(i);\n            if (next == ch)\n                return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));\n            if (next == 92 /* '\\\\' */)\n                elts.push(cx.elt(\"Escape\", i, i++ + 2));\n            if (space(next))\n                break;\n        }\n        return -1;\n    };\n}\n/**\nExtension providing\n[Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\nsuperscript using `^` markers.\n*/\nconst Superscript = {\n    defineNodes: [\n        { name: \"Superscript\", style: tags.special(tags.content) },\n        { name: \"SuperscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Superscript\",\n            parse: parseSubSuper(94 /* '^' */, \"Superscript\", \"SuperscriptMark\")\n        }]\n};\n/**\nExtension providing\n[Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\nsubscript using `~` markers.\n*/\nconst Subscript = {\n    defineNodes: [\n        { name: \"Subscript\", style: tags.special(tags.content) },\n        { name: \"SubscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Subscript\",\n            parse: parseSubSuper(126 /* '~' */, \"Subscript\", \"SubscriptMark\")\n        }]\n};\n/**\nExtension that parses two colons with only letters, underscores,\nand numbers between them as `Emoji` nodes.\n*/\nconst Emoji = {\n    defineNodes: [{ name: \"Emoji\", style: tags.character }],\n    parseInline: [{\n            name: \"Emoji\",\n            parse(cx, next, pos) {\n                let match;\n                if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))\n                    return -1;\n                return cx.addElement(cx.elt(\"Emoji\", pos, pos + 1 + match[0].length));\n            }\n        }]\n};\n\nexport { Autolink, BlockContext, Element, Emoji, GFM, InlineContext, LeafBlock, Line, MarkdownParser, Strikethrough, Subscript, Superscript, Table, TaskList, parseCode, parser };\n"],"names":["EditorSelection","countColumn","Prec","EditorState","keymap","defineLanguageFacet","foldNodeProp","indentNodeProp","languageDataProp","foldService","syntaxTree","Language","LanguageDescription","ParseContext","indentUnit","LanguageSupport","CompletionContext","parser","GFM","Subscript","Superscript","Emoji","MarkdownParser","parseCode","html","htmlCompletionSource","NodeProp","data","commentTokens","block","open","close","headingProp","commonmark","configure","props","add","type","is","isHeading","isList","undefined","tree","state","from","doc","lineAt","to","Document","match","exec","name","findSectionEnd","headerNode","level","last","next","nextSibling","heading","headerIndent","of","start","end","node","resolveInner","parent","prop","upto","mkLang","commonmarkLanguage","extended","Table","markdownLanguage","getCodeParser","languages","defaultLanguage","info","found","matchLanguageName","support","language","getSkippingParser","load","Context","constructor","spaceBefore","spaceAfter","item","blank","maxWidth","trailing","result","length","i","marker","number","String","itemNumber","getContext","nodes","context","cur","push","line","startPos","text","slice","after","len","replace","sliceString","renumberList","changes","offset","prev","m","insert","normalizeIndent","content","facet","col","space","insertNewlineContinueMarkup","dispatch","dont","changeByRange","range","empty","isActiveAt","pos","pop","inner","emptyLine","test","first","firstChild","second","getChild","delTo","cursor","blankLine","lineBreak","prevLine","quoted","index","map","continued","e","charAt","nonTightList","update","scrollIntoView","userEvent","isMark","line1","line2","contextNodeForDelete","scan","childBefore","lastChild","deleteMarkupBackward","spaceEnd","markdownKeymap","key","run","htmlNoMatch","matchClosingTags","markdown","config","codeLanguages","defaultCodeLanguage","addKeymap","base","completeHTMLTags","htmlTagLanguage","RangeError","extensions","defaultCode","codeParser","htmlParser","high","lang","autocomplete","htmlTagCompletion","sliceDoc","isTop","options","htmlTagCompletions","validFor","_tagCompletions","create","NodeType","NodeSet","Tree","Parser","parseMixed","styleTags","tags","Tag","CompositeBlock","value","parentHash","hash","children","positions","hashProp","contextHash","addChild","child","toTree","nodeSet","Math","max","types","balance","makeTree","none","Type","LeafBlock","marks","parsers","Line","baseIndent","basePos","depth","markers","indent","forward","forwardInner","newPos","skipSpace","countIndent","charCodeAt","reset","moveBase","moveBaseColumn","findColumn","addMarker","elt","goal","scrub","skipForList","bl","cx","stack","size","OrderedList","isOrderedList","isBulletList","BulletList","isHorizontalRule","DefaultSkipMarkup","Blockquote","QuoteMark","lineStart","ListItem","_cx","ch","skipSpaceBack","isFencedCode","isBlockquote","breaking","count","isSetextUnderline","leafBlockParsers","indexOf","DefaultLeafBlocks","SetextHeading","inList","isAtxHeading","EmptyLine","CommentEnd","ProcessingEnd","HTMLBlockStyle","isHTMLBlock","rest","getListIndent","indentAfter","indented","addCodeText","CodeText","DefaultBlockParsers","LinkReference","IndentedCode","pendingMarks","nextLine","codeStart","filter","concat","addNode","buffer","writeElements","finish","CodeBlock","FencedCode","fenceEnd","infoFrom","infoTo","CodeMark","CodeInfo","textStart","textEnd","prevLineEnd","startContext","HorizontalRule","newBase","ListMark","ATXHeading","off","endOfSpace","buf","write","HeaderMark","parseInline","ATXHeading1","HTMLBlock","nodeType","CommentBlock","ProcessingInstructionBlock","LinkReferenceParser","leaf","stage","elts","advance","complete","addLeafElement","nextStage","parseLinkLabel","LinkMark","parseURL","skip","title","parseLinkTitle","titleEnd","lineEnd","SetextHeadingParser","underline","underlineMark","SetextHeading1","SetextHeading2","_","DefaultEndLeaf","p","scanLineResult","BlockContext","input","fragments","ranges","atEnd","reusePlaceholders","Map","stoppedAt","rangeI","absoluteLineStart","absoluteLineEnd","FragmentCursor","readLine","parsedPos","markI","mark","finishContext","reuseFragment","blockParsers","parse","lines","stop","endLeafBlock","finishLeaf","stopAt","moveTo","matches","taken","takeNodes","toRelative","moveRangeI","parentType","peekLine","scanLine","r","lineChunkAt","textOffset","nextFrom","handler","skipContextMarkup","Error","chunk","lineChunks","eol","startComposite","getNodeType","addElement","injectMarks","top","addGaps","injectGaps","topNode","inline","Paragraph","TreeElement","Buffer","dummies","rangeEnd","movePastNext","inclusive","reuse","get","propValues","blockNames","inlineParsers","inlineNames","wrappers","nodeTypes","Object","t","id","createParse","w","spec","resolveConfig","nonEmpty","defineNodes","assign","styles","s","composite","style","some","group","define","Array","isArray","extend","remove","rm","parseBlock","before","findName","splice","endLeaf","wrap","InlineContext","outer","char","token","resolveMarkers","a","conf","conc","b","wrapA","wrapB","names","Escape","writeTo","build","reused","topID","Element","startOff","EmphasisUnderscore","resolve","EmphasisAsterisk","LinkStart","ImageStart","InlineDelimiter","side","Escapable","Punctuation","RegExp","DefaultInline","escaped","append","Entity","InlineCode","curSize","HTMLTag","url","Autolink","URL","comment","Comment","procInst","ProcessingInstruction","Emphasis","pBefore","pAfter","sBefore","sAfter","leftFlanking","rightFlanking","canOpen","canClose","HardBreak","Link","Image","LinkEnd","parts","part","takeContent","link","finishLink","j","endPos","unshift","dest","label","LinkTitle","requireNonWS","min","LinkLabel","addDelimiter","hasOpenLink","emp","closeSize","k","element","keep","findOpeningDelimiter","startIndex","elements","eI","NotLast","fragment","fragmentEnd","nextFragment","read","c","rPos","childAfter","fragEnd","openEnd","blockI","prevEnd","prevI","isAnonymous","dummy","set","abs","gapFrom","gapTo","markdownHighlighting","quote","contentSeparator","heading1","heading2","heading3","heading4","heading5","heading6","escape","character","emphasis","strong","list","monospace","processingInstruction","labelName","string","keys","n","leftOverSpace","nextPos","infoNode","overlay","StrikethroughDelim","Strikethrough","strikethrough","parseRow","startI","cellStart","cellEnd","esc","parseCell","hasPipe","str","delimiterLine","TableParser","rows","lineText","firstRow","firstCount","TaskParser","TaskList","atom","autolinkRE","urlRE","lastTwoDomainWords","emailRE","xmppResourceRE","autolinkURLEnd","lastIndex","autolinkEmailEnd","absPos","noBracket","parseSubSuper","special"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1]}