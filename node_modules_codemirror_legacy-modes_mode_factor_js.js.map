{"version":3,"file":"node_modules_codemirror_legacy-modes_mode_factor_js.js","mappings":"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","sources":["./node_modules/@codemirror/legacy-modes/mode/factor.js"],"sourcesContent":["import {simpleMode} from \"./simple-mode.js\"\n\nexport const factor = simpleMode({\n    start: [\n      // comments\n      {regex: /#?!.*/, token: \"comment\"},\n      // strings \"\"\", multiline --> state\n      {regex: /\"\"\"/, token: \"string\", next: \"string3\"},\n      {regex: /(STRING:)(\\s)/, token: [\"keyword\", null], next: \"string2\"},\n      {regex: /\\S*?\"/, token: \"string\", next: \"string\"},\n      // numbers: dec, hex, unicode, bin, fractional, complex\n      {regex: /(?:0x[\\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\\-?\\d+.?\\d*)(?=\\s)/, token: \"number\"},\n      //{regex: /[+-]?/} //fractional\n      // definition: defining word, defined word, etc\n      {regex: /((?:GENERIC)|\\:?\\:)(\\s+)(\\S+)(\\s+)(\\()/, token: [\"keyword\", null, \"def\", null, \"bracket\"], next: \"stack\"},\n      // method definition: defining word, type, defined word, etc\n      {regex: /(M\\:)(\\s+)(\\S+)(\\s+)(\\S+)/, token: [\"keyword\", null, \"def\", null, \"tag\"]},\n      // vocabulary using --> state\n      {regex: /USING\\:/, token: \"keyword\", next: \"vocabulary\"},\n      // vocabulary definition/use\n      {regex: /(USE\\:|IN\\:)(\\s+)(\\S+)(?=\\s|$)/, token: [\"keyword\", null, \"tag\"]},\n      // definition: a defining word, defined word\n      {regex: /(\\S+\\:)(\\s+)(\\S+)(?=\\s|$)/, token: [\"keyword\", null, \"def\"]},\n      // \"keywords\", incl. ; t f . [ ] { } defining words\n      {regex: /(?:;|\\\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\\.|\\S*\\[|\\]|\\S*\\{|\\})(?=\\s|$)/, token: \"keyword\"},\n      // <constructors> and the like\n      {regex: /\\S+[\\)>\\.\\*\\?]+(?=\\s|$)/, token: \"builtin\"},\n      {regex: /[\\)><]+\\S+(?=\\s|$)/, token: \"builtin\"},\n      // operators\n      {regex: /(?:[\\+\\-\\=\\/\\*<>])(?=\\s|$)/, token: \"keyword\"},\n      // any id (?)\n      {regex: /\\S+/, token: \"variable\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    vocabulary: [\n      {regex: /;/, token: \"keyword\", next: \"start\"},\n      {regex: /\\S+/, token: \"tag\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    string: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string2: [\n      {regex: /^;/, token: \"keyword\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string3: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"\"\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    stack: [\n      {regex: /\\)/, token: \"bracket\", next: \"start\"},\n      {regex: /--/, token: \"bracket\"},\n      {regex: /\\S+/, token: \"meta\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    languageData: {\n      name: \"factor\",\n      dontIndentStates: [\"start\", \"vocabulary\", \"string\", \"string3\", \"stack\"],\n      commentTokens: {line: \"!\"}\n    }\n  });\n"],"names":["simpleMode","factor","start","regex","token","next","vocabulary","string","string2","string3","stack","languageData","name","dontIndentStates","commentTokens","line"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}