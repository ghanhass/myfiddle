{"version":3,"file":"node_modules_codemirror_legacy-modes_mode_oz_js.js","mappings":"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","sources":["./node_modules/@codemirror/legacy-modes/mode/oz.js"],"sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nvar singleOperators = /[\\^@!\\|<>#~\\.\\*\\-\\+\\\\/,=]/;\nvar doubleOperators = /(<-)|(:=)|(=<)|(>=)|(<=)|(<:)|(>:)|(=:)|(\\\\=)|(\\\\=:)|(!!)|(==)|(::)/;\nvar tripleOperators = /(:::)|(\\.\\.\\.)|(=<:)|(>=:)/;\n\nvar middle = [\"in\", \"then\", \"else\", \"of\", \"elseof\", \"elsecase\", \"elseif\", \"catch\",\n              \"finally\", \"with\", \"require\", \"prepare\", \"import\", \"export\", \"define\", \"do\"];\nvar end = [\"end\"];\n\nvar atoms = wordRegexp([\"true\", \"false\", \"nil\", \"unit\"]);\nvar commonKeywords = wordRegexp([\"andthen\", \"at\", \"attr\", \"declare\", \"feat\", \"from\", \"lex\",\n                                 \"mod\", \"div\", \"mode\", \"orelse\", \"parser\", \"prod\", \"prop\", \"scanner\", \"self\", \"syn\", \"token\"]);\nvar openingKeywords = wordRegexp([\"local\", \"proc\", \"fun\", \"case\", \"class\", \"if\", \"cond\", \"or\", \"dis\",\n                                  \"choice\", \"not\", \"thread\", \"try\", \"raise\", \"lock\", \"for\", \"suchthat\", \"meth\", \"functor\"]);\nvar middleKeywords = wordRegexp(middle);\nvar endKeywords = wordRegexp(end);\n\n// Tokenizers\nfunction tokenBase(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  // Brackets\n  if(stream.match(/[{}]/)) {\n    return \"bracket\";\n  }\n\n  // Special [] keyword\n  if (stream.match('[]')) {\n    return \"keyword\"\n  }\n\n  // Operators\n  if (stream.match(tripleOperators) || stream.match(doubleOperators)) {\n    return \"operator\";\n  }\n\n  // Atoms\n  if(stream.match(atoms)) {\n    return 'atom';\n  }\n\n  // Opening keywords\n  var matched = stream.match(openingKeywords);\n  if (matched) {\n    if (!state.doInCurrentLine)\n      state.currentIndent++;\n    else\n      state.doInCurrentLine = false;\n\n    // Special matching for signatures\n    if(matched[0] == \"proc\" || matched[0] == \"fun\")\n      state.tokenize = tokenFunProc;\n    else if(matched[0] == \"class\")\n      state.tokenize = tokenClass;\n    else if(matched[0] == \"meth\")\n      state.tokenize = tokenMeth;\n\n    return 'keyword';\n  }\n\n  // Middle and other keywords\n  if (stream.match(middleKeywords) || stream.match(commonKeywords)) {\n    return \"keyword\"\n  }\n\n  // End keywords\n  if (stream.match(endKeywords)) {\n    state.currentIndent--;\n    return 'keyword';\n  }\n\n  // Eat the next char for next comparisons\n  var ch = stream.next();\n\n  // Strings\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n\n  // Numbers\n  if (/[~\\d]/.test(ch)) {\n    if (ch == \"~\") {\n      if(! /^[0-9]/.test(stream.peek()))\n        return null;\n      else if (( stream.next() == \"0\" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\\.[0-9]+)?([eE][~+]?[0-9]+)?/))\n        return \"number\";\n    }\n\n    if ((ch == \"0\" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\\.[0-9]+)?([eE][~+]?[0-9]+)?/))\n      return \"number\";\n\n    return null;\n  }\n\n  // Comments\n  if (ch == \"%\") {\n    stream.skipToEnd();\n    return 'comment';\n  }\n  else if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n  }\n\n  // Single operators\n  if(singleOperators.test(ch)) {\n    return \"operator\";\n  }\n\n  // If nothing match, we skip the entire alphanumerical block\n  stream.eatWhile(/\\w/);\n\n  return \"variable\";\n}\n\nfunction tokenClass(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n  stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)/);\n  state.tokenize = tokenBase;\n  return \"type\"\n}\n\nfunction tokenMeth(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n  stream.match(/([a-zA-Z][A-Za-z0-9_]*)|(`.+`)/);\n  state.tokenize = tokenBase;\n  return \"def\"\n}\n\nfunction tokenFunProc(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  if(!state.hasPassedFirstStage && stream.eat(\"{\")) {\n    state.hasPassedFirstStage = true;\n    return \"bracket\";\n  }\n  else if(state.hasPassedFirstStage) {\n    stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)|\\$/);\n    state.hasPassedFirstStage = false;\n    state.tokenize = tokenBase;\n    return \"def\"\n  }\n  else {\n    state.tokenize = tokenBase;\n    return null;\n  }\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped)\n      state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction buildElectricInputRegEx() {\n  // Reindentation should occur on [] or on a match of any of\n  // the block closing keywords, at the end of a line.\n  var allClosings = middle.concat(end);\n  return new RegExp(\"[\\\\[\\\\]]|(\" + allClosings.join(\"|\") + \")$\");\n}\n\nexport const oz = {\n  name: \"oz\",\n\n  startState: function () {\n    return {\n      tokenize: tokenBase,\n      currentIndent: 0,\n      doInCurrentLine: false,\n      hasPassedFirstStage: false\n    };\n  },\n\n  token: function (stream, state) {\n    if (stream.sol())\n      state.doInCurrentLine = 0;\n\n    return state.tokenize(stream, state);\n  },\n\n  indent: function (state, textAfter, cx) {\n    var trueText = textAfter.replace(/^\\s+|\\s+$/g, '');\n\n    if (trueText.match(endKeywords) || trueText.match(middleKeywords) || trueText.match(/(\\[])/))\n      return cx.unit * (state.currentIndent - 1);\n\n    if (state.currentIndent < 0)\n      return 0;\n\n    return state.currentIndent * cx.unit\n  },\n\n  languageData: {\n    indentOnInut: buildElectricInputRegEx(),\n    commentTokens: {line: \"%\", block: {open: \"/*\", close: \"*/\"}}\n  }\n};\n"],"names":["wordRegexp","words","RegExp","join","singleOperators","doubleOperators","tripleOperators","middle","end","atoms","commonKeywords","openingKeywords","middleKeywords","endKeywords","tokenBase","stream","state","eatSpace","match","matched","doInCurrentLine","currentIndent","tokenize","tokenFunProc","tokenClass","tokenMeth","ch","next","tokenString","test","peek","skipToEnd","eat","tokenComment","eatWhile","hasPassedFirstStage","maybeEnd","quote","escaped","buildElectricInputRegEx","allClosings","concat","oz","name","startState","token","sol","indent","textAfter","cx","trueText","replace","unit","languageData","indentOnInut","commentTokens","line","block","open","close"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}