{"version":3,"file":"node_modules_codemirror_legacy-modes_mode_protobuf_js.js","mappings":";;;;;;;;;;;;;AAAA,SAASA,UAAUA,CAACC,KAAK,EAAE;EACzB,OAAO,IAAIC,MAAM,CAAC,KAAK,GAAGD,KAAK,CAACE,IAAI,CAAC,KAAK,CAAC,GAAG,OAAO,EAAE,GAAG,CAAC;AAC7D;AAAC;AAED,IAAIC,YAAY,GAAG,CACjB,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EACxC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,YAAY,EAAE,QAAQ,EACjF,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EACpD,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EACtG,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CACtC;AACD,IAAIC,QAAQ,GAAGL,UAAU,CAACI,YAAY,CAAC;AAEvC,IAAIE,WAAW,GAAG,IAAIJ,MAAM,CAAC,+CAA+C,CAAC;AAE7E,SAASK,SAASA,CAACC,MAAM,EAAE;EACzB;EACA,IAAIA,MAAM,CAACC,QAAQ,CAAC,CAAC,EAAE,OAAO,IAAI;;EAElC;EACA,IAAID,MAAM,CAACE,KAAK,CAAC,IAAI,CAAC,EAAE;IACtBF,MAAM,CAACG,SAAS,CAAC,CAAC;IAClB,OAAO,SAAS;EAClB;;EAEA;EACA,IAAIH,MAAM,CAACE,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,EAAE;IACrC,IAAIF,MAAM,CAACE,KAAK,CAAC,sBAAsB,CAAC,EACtC,OAAO,QAAQ;IACjB,IAAIF,MAAM,CAACE,KAAK,CAAC,iCAAiC,CAAC,EACjD,OAAO,QAAQ;IACjB,IAAIF,MAAM,CAACE,KAAK,CAAC,4BAA4B,CAAC,EAC5C,OAAO,QAAQ;EACnB;;EAEA;EACA,IAAIF,MAAM,CAACE,KAAK,CAAC,iBAAiB,CAAC,EAAE;IAAE,OAAO,QAAQ;EAAE;EACxD,IAAIF,MAAM,CAACE,KAAK,CAAC,iBAAiB,CAAC,EAAE;IAAE,OAAO,QAAQ;EAAE;;EAExD;EACA,IAAIF,MAAM,CAACE,KAAK,CAACL,QAAQ,CAAC,EAAE;IAAE,OAAO,SAAS;EAAE;EAChD,IAAIG,MAAM,CAACE,KAAK,CAACJ,WAAW,CAAC,EAAE;IAAE,OAAO,UAAU;EAAE;EAAE;;EAEtD;EACAE,MAAM,CAACI,IAAI,CAAC,CAAC;EACb,OAAO,IAAI;AACb;AAAC;AAEM,MAAMC,QAAQ,GAAG;EACtBC,IAAI,EAAE,UAAU;EAChBC,KAAK,EAAER,SAAS;EAChBS,YAAY,EAAE;IACZC,YAAY,EAAEb;EAChB;AACF,CAAC,C","sources":["./node_modules/@codemirror/legacy-modes/mode/protobuf.js"],"sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n};\n\nvar keywordArray = [\n  \"package\", \"message\", \"import\", \"syntax\",\n  \"required\", \"optional\", \"repeated\", \"reserved\", \"default\", \"extensions\", \"packed\",\n  \"bool\", \"bytes\", \"double\", \"enum\", \"float\", \"string\",\n  \"int32\", \"int64\", \"uint32\", \"uint64\", \"sint32\", \"sint64\", \"fixed32\", \"fixed64\", \"sfixed32\", \"sfixed64\",\n  \"option\", \"service\", \"rpc\", \"returns\"\n];\nvar keywords = wordRegexp(keywordArray);\n\nvar identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n\nfunction tokenBase(stream) {\n  // whitespaces\n  if (stream.eatSpace()) return null;\n\n  // Handle one line Comments\n  if (stream.match(\"//\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  // Handle Number Literals\n  if (stream.match(/^[0-9\\.+-]/, false)) {\n    if (stream.match(/^[+-]?0x[0-9a-fA-F]+/))\n      return \"number\";\n    if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?/))\n      return \"number\";\n    if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?/))\n      return \"number\";\n  }\n\n  // Handle Strings\n  if (stream.match(/^\"([^\"]|(\"\"))*\"/)) { return \"string\"; }\n  if (stream.match(/^'([^']|(''))*'/)) { return \"string\"; }\n\n  // Handle words\n  if (stream.match(keywords)) { return \"keyword\"; }\n  if (stream.match(identifiers)) { return \"variable\"; } ;\n\n  // Handle non-detected items\n  stream.next();\n  return null;\n};\n\nexport const protobuf = {\n  name: \"protobuf\",\n  token: tokenBase,\n  languageData: {\n    autocomplete: keywordArray\n  }\n}\n"],"names":["wordRegexp","words","RegExp","join","keywordArray","keywords","identifiers","tokenBase","stream","eatSpace","match","skipToEnd","next","protobuf","name","token","languageData","autocomplete"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}