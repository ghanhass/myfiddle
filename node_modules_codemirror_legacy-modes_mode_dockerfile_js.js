"use strict";
(self["webpackChunkfiddle"] = self["webpackChunkfiddle"] || []).push([["node_modules_codemirror_legacy-modes_mode_dockerfile_js"],{

/***/ 1409:
/*!******************************************************************!*\
  !*** ./node_modules/@codemirror/legacy-modes/mode/dockerfile.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dockerFile: () => (/* binding */ dockerFile)
/* harmony export */ });
/* harmony import */ var _simple_mode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./simple-mode.js */ 5249);

var from = "from";
var fromRegex = new RegExp("^(\\s*)\\b(" + from + ")\\b", "i");
var shells = ["run", "cmd", "entrypoint", "shell"];
var shellsAsArrayRegex = new RegExp("^(\\s*)(" + shells.join('|') + ")(\\s+\\[)", "i");
var expose = "expose";
var exposeRegex = new RegExp("^(\\s*)(" + expose + ")(\\s+)", "i");
var others = ["arg", "from", "maintainer", "label", "env", "add", "copy", "volume", "user", "workdir", "onbuild", "stopsignal", "healthcheck", "shell"];

// Collect all Dockerfile directives
var instructions = [from, expose].concat(shells).concat(others),
  instructionRegex = "(" + instructions.join('|') + ")",
  instructionOnlyLine = new RegExp("^(\\s*)" + instructionRegex + "(\\s*)(#.*)?$", "i"),
  instructionWithArguments = new RegExp("^(\\s*)" + instructionRegex + "(\\s+)", "i");
const dockerFile = (0,_simple_mode_js__WEBPACK_IMPORTED_MODULE_0__.simpleMode)({
  start: [
  // Block comment: This is a line starting with a comment
  {
    regex: /^\s*#.*$/,
    sol: true,
    token: "comment"
  }, {
    regex: fromRegex,
    token: [null, "keyword"],
    sol: true,
    next: "from"
  },
  // Highlight an instruction without any arguments (for convenience)
  {
    regex: instructionOnlyLine,
    token: [null, "keyword", null, "error"],
    sol: true
  }, {
    regex: shellsAsArrayRegex,
    token: [null, "keyword", null],
    sol: true,
    next: "array"
  }, {
    regex: exposeRegex,
    token: [null, "keyword", null],
    sol: true,
    next: "expose"
  },
  // Highlight an instruction followed by arguments
  {
    regex: instructionWithArguments,
    token: [null, "keyword", null],
    sol: true,
    next: "arguments"
  }, {
    regex: /./,
    token: null
  }],
  from: [{
    regex: /\s*$/,
    token: null,
    next: "start"
  }, {
    // Line comment without instruction arguments is an error
    regex: /(\s*)(#.*)$/,
    token: [null, "error"],
    next: "start"
  }, {
    regex: /(\s*\S+\s+)(as)/i,
    token: [null, "keyword"],
    next: "start"
  },
  // Fail safe return to start
  {
    token: null,
    next: "start"
  }],
  single: [{
    regex: /(?:[^\\']|\\.)/,
    token: "string"
  }, {
    regex: /'/,
    token: "string",
    pop: true
  }],
  double: [{
    regex: /(?:[^\\"]|\\.)/,
    token: "string"
  }, {
    regex: /"/,
    token: "string",
    pop: true
  }],
  array: [{
    regex: /\]/,
    token: null,
    next: "start"
  }, {
    regex: /"(?:[^\\"]|\\.)*"?/,
    token: "string"
  }],
  expose: [{
    regex: /\d+$/,
    token: "number",
    next: "start"
  }, {
    regex: /[^\d]+$/,
    token: null,
    next: "start"
  }, {
    regex: /\d+/,
    token: "number"
  }, {
    regex: /[^\d]+/,
    token: null
  },
  // Fail safe return to start
  {
    token: null,
    next: "start"
  }],
  arguments: [{
    regex: /^\s*#.*$/,
    sol: true,
    token: "comment"
  }, {
    regex: /"(?:[^\\"]|\\.)*"?$/,
    token: "string",
    next: "start"
  }, {
    regex: /"/,
    token: "string",
    push: "double"
  }, {
    regex: /'(?:[^\\']|\\.)*'?$/,
    token: "string",
    next: "start"
  }, {
    regex: /'/,
    token: "string",
    push: "single"
  }, {
    regex: /[^#"']+[\\`]$/,
    token: null
  }, {
    regex: /[^#"']+$/,
    token: null,
    next: "start"
  }, {
    regex: /[^#"']+/,
    token: null
  },
  // Fail safe return to start
  {
    token: null,
    next: "start"
  }],
  languageData: {
    commentTokens: {
      line: "#"
    }
  }
});

/***/ })

}]);
//# sourceMappingURL=node_modules_codemirror_legacy-modes_mode_dockerfile_js.js.map