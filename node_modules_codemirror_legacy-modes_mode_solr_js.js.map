{"version":3,"file":"node_modules_codemirror_legacy-modes_mode_solr_js.js","mappings":"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","sources":["./node_modules/@codemirror/legacy-modes/mode/solr.js"],"sourcesContent":["var isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\\"\\\\]/;\nvar isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\nvar isOperatorString = /^(OR|AND|NOT|TO)$/;\n\nfunction isNumber(word) {\n  return parseFloat(word).toString() === word;\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) break;\n      escaped = !escaped && next == \"\\\\\";\n    }\n\n    if (!escaped) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction tokenOperator(operator) {\n  return function(stream, state) {\n    if (operator == \"|\")\n      stream.eat(/\\|/);\n    else if (operator == \"&\")\n      stream.eat(/\\&/);\n\n    state.tokenize = tokenBase;\n    return \"operator\";\n  };\n}\n\nfunction tokenWord(ch) {\n  return function(stream, state) {\n    var word = ch;\n    while ((ch = stream.peek()) && ch.match(isStringChar) != null) {\n      word += stream.next();\n    }\n\n    state.tokenize = tokenBase;\n    if (isOperatorString.test(word))\n      return \"operator\";\n    else if (isNumber(word))\n      return \"number\";\n    else if (stream.peek() == \":\")\n      return \"propertyName\";\n    else\n      return \"string\";\n  };\n}\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"')\n    state.tokenize = tokenString(ch);\n  else if (isOperatorChar.test(ch))\n    state.tokenize = tokenOperator(ch);\n  else if (isStringChar.test(ch))\n    state.tokenize = tokenWord(ch);\n\n  return (state.tokenize != tokenBase) ? state.tokenize(stream, state) : null;\n}\n\nexport const solr = {\n  name: \"solr\",\n\n  startState: function() {\n    return {\n      tokenize: tokenBase\n    };\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  }\n};\n"],"names":["isStringChar","isOperatorChar","isOperatorString","isNumber","word","parseFloat","toString","tokenString","quote","stream","state","escaped","next","tokenize","tokenBase","tokenOperator","operator","eat","tokenWord","ch","peek","match","test","solr","name","startState","token","eatSpace"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}